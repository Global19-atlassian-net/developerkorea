[[[{"기":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"술":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"블":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"애":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"저":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"펑":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"션":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"과":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"공":["dea15283-31fb-4d41-8879-a5868140aa65"],"정":["dea15283-31fb-4d41-8879-a5868140aa65"],"한":["dea15283-31fb-4d41-8879-a5868140aa65"],"편":["dea15283-31fb-4d41-8879-a5868140aa65"],"를":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"이":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"용":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"해":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"파":["989c24f3-a87c-4409-920b-4ac7320e3459"]},{"로":["de27e7e3-b624-48a5-9050-0b2f333757b0","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"그":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"를":["de27e7e3-b624-48a5-9050-0b2f333757b0","dea15283-31fb-4d41-8879-a5868140aa65"],"시":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"이":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"벤":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"트":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"리":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"드":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"간":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"형":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"향":["dea15283-31fb-4d41-8879-a5868140aa65"],"없":["dea15283-31fb-4d41-8879-a5868140aa65"],"는":["dea15283-31fb-4d41-8879-a5868140aa65"],"위":["dea15283-31fb-4d41-8879-a5868140aa65"],"구":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"독":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"및":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"직":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"프":["989c24f3-a87c-4409-920b-4ac7320e3459"],"라":["989c24f3-a87c-4409-920b-4ac7320e3459"],"인":["989c24f3-a87c-4409-920b-4ac7320e3459"],"을":["989c24f3-a87c-4409-920b-4ac7320e3459"],"팩":["989c24f3-a87c-4409-920b-4ac7320e3459"],"토":["989c24f3-a87c-4409-920b-4ac7320e3459"]},{"작":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"합":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"니":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"다":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"식":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"데":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"터":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"주":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"고":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"받":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"및":["dea15283-31fb-4d41-8879-a5868140aa65"],"애":["dea15283-31fb-4d41-8879-a5868140aa65"],"저":["dea15283-31fb-4d41-8879-a5868140aa65"],"도":["dea15283-31fb-4d41-8879-a5868140aa65"],"구":["dea15283-31fb-4d41-8879-a5868140aa65"],"활":["dea15283-31fb-4d41-8879-a5868140aa65"],"앱":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"핸":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"들":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"러":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"프":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"비":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"닝":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"링":["989c24f3-a87c-4409-920b-4ac7320e3459"],"하":["989c24f3-a87c-4409-920b-4ac7320e3459"],"는":["989c24f3-a87c-4409-920b-4ac7320e3459"],"가":["989c24f3-a87c-4409-920b-4ac7320e3459"],"지":["989c24f3-a87c-4409-920b-4ac7320e3459"],"방":["989c24f3-a87c-4409-920b-4ac7320e3459"]},{"기":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"용":["dea15283-31fb-4d41-8879-a5868140aa65"],"하":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"법":["989c24f3-a87c-4409-920b-4ac7320e3459"]},{},{},{},{},{}],{},["@de27e7e3-b624-48a5-9050-0b2f333757b0","@1bf92aeb-335f-446d-bb78-ec24ce7a8da8","@dea15283-31fb-4d41-8879-a5868140aa65","@e0dc618c-8d19-43ba-a613-f4b7c7c295df","@989c24f3-a87c-4409-920b-4ac7320e3459"]],[[{"안":["de27e7e3-b624-48a5-9050-0b2f333757b0","dea15283-31fb-4d41-8879-a5868140aa65"],"녕":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"하":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"세":["de27e7e3-b624-48a5-9050-0b2f333757b0","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"요":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"년":["de27e7e3-b624-48a5-9050-0b2f333757b0","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"한":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"국":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"마":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"이":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"크":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"로":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"소":["de27e7e3-b624-48a5-9050-0b2f333757b0","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"프":["de27e7e3-b624-48a5-9050-0b2f333757b0","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"트":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"에":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"서":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"새":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"롭":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"애":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"저":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"펑":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"션":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"은":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"자":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"체":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"적":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"으":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"벤":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"그":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"리":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"드":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"대":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"바":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"인":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"딩":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","989c24f3-a87c-4409-920b-4ac7320e3459"],"확":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"장":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"기":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"능":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"을":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"제":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"공":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"고":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"있":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"어":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"데":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"터":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"를":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"아":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"주":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"손":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"쉽":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"게":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"받":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"수":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"습":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"니":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"다":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"지":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"만":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"현":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"재":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"직":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"정":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"식":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"형":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"원":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"않":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"는":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"유":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"버":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"전":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"의":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"가":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"때":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"문":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"입":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"도":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"되":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"시":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"점":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"면":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"까":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"예":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"상":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"따":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"라":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"사":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"용":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"해":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"위":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"별":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"작":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"업":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"줘":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"야":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"합":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"포":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"스":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"방":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"법":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"간":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"단":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"히":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"보":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"록":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"겠":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"술":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"른":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"언":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"래":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"링":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","989c24f3-a87c-4409-920b-4ac7320e3459"],"클":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"개":["dea15283-31fb-4d41-8879-a5868140aa65"],"삶":["dea15283-31fb-4d41-8879-a5868140aa65"],"영":["dea15283-31fb-4d41-8879-a5868140aa65"],"향":["dea15283-31fb-4d41-8879-a5868140aa65"],"미":["dea15283-31fb-4d41-8879-a5868140aa65"],"치":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"중":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"결":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"많":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"활":["dea15283-31fb-4d41-8879-a5868140aa65"],"루":["dea15283-31fb-4d41-8879-a5868140aa65"],"윤":["dea15283-31fb-4d41-8879-a5868140aa65"],"책":["dea15283-31fb-4d41-8879-a5868140aa65"],"임":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"감":["dea15283-31fb-4d41-8879-a5868140aa65"],"성":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"두":["dea15283-31fb-4d41-8879-a5868140aa65"],"선":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"목":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"알":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"즘":["dea15283-31fb-4d41-8879-a5868140aa65"],"발":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"더":["dea15283-31fb-4d41-8879-a5868140aa65"],"화":["dea15283-31fb-4d41-8879-a5868140aa65"],"민":["dea15283-31fb-4d41-8879-a5868140aa65"],"족":["dea15283-31fb-4d41-8879-a5868140aa65"],"편":["dea15283-31fb-4d41-8879-a5868140aa65"],"여":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"준":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"코":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"할":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"없":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"것":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"머":["dea15283-31fb-4d41-8879-a5868140aa65"],"신":["dea15283-31fb-4d41-8879-a5868140aa65"],"러":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"닝":["dea15283-31fb-4d41-8879-a5868140aa65"],"람":["dea15283-31fb-4d41-8879-a5868140aa65"],"들":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"뢰":["dea15283-31fb-4d41-8879-a5868140aa65"],"템":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"회":["dea15283-31fb-4d41-8879-a5868140aa65"],"비":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"롯":["dea15283-31fb-4d41-8879-a5868140aa65"],"룹":["dea15283-31fb-4d41-8879-a5868140aa65"],"노":["dea15283-31fb-4d41-8879-a5868140aa65"],"력":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"과":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"계":["dea15283-31fb-4d41-8879-a5868140aa65"],"속":["dea15283-31fb-4d41-8879-a5868140aa65"],"참":["dea15283-31fb-4d41-8879-a5868140aa65"],"난":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"빌":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"통":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"떻":["dea15283-31fb-4d41-8879-a5868140aa65"],"구":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"표":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"었":["dea15283-31fb-4d41-8879-a5868140aa65"],"학":["dea15283-31fb-4d41-8879-a5868140aa65"],"및":["dea15283-31fb-4d41-8879-a5868140aa65"],"분":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"께":["dea15283-31fb-4d41-8879-a5868140aa65"],"모":["dea15283-31fb-4d41-8879-a5868140aa65"],"델":["dea15283-31fb-4d41-8879-a5868140aa65"],"잘":["dea15283-31fb-4d41-8879-a5868140aa65"],"호":["dea15283-31fb-4d41-8879-a5868140aa65"],"며":["dea15283-31fb-4d41-8879-a5868140aa65"],"반":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"축":["dea15283-31fb-4d41-8879-a5868140aa65"],"월":["dea15283-31fb-4d41-8879-a5868140aa65"],"우":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"솔":["dea15283-31fb-4d41-8879-a5868140aa65"],"키":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"텍":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"박":["dea15283-31fb-4d41-8879-a5868140aa65"],"님":["dea15283-31fb-4d41-8879-a5868140aa65"],"운":["dea15283-31fb-4d41-8879-a5868140aa65"],"말":["dea15283-31fb-4d41-8879-a5868140aa65"],"씀":["dea15283-31fb-4d41-8879-a5868140aa65"],"셨":["dea15283-31fb-4d41-8879-a5868140aa65"],"동":["dea15283-31fb-4d41-8879-a5868140aa65"],"생":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"피":["dea15283-31fb-4d41-8879-a5868140aa65"],"나":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"품":["dea15283-31fb-4d41-8879-a5868140aa65"],"질":["dea15283-31fb-4d41-8879-a5868140aa65"],"특":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"떤":["dea15283-31fb-4d41-8879-a5868140aa65"],"음":["dea15283-31fb-4d41-8879-a5868140aa65"],"남":["dea15283-31fb-4d41-8879-a5868140aa65"],"못":["dea15283-31fb-4d41-8879-a5868140aa65"],"번":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"째":["dea15283-31fb-4d41-8879-a5868140aa65"],"당":["dea15283-31fb-4d41-8879-a5868140aa65"],"출":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"심":["dea15283-31fb-4d41-8879-a5868140aa65"],"채":["dea15283-31fb-4d41-8879-a5868140aa65"],"관":["dea15283-31fb-4d41-8879-a5868140aa65"],"련":["dea15283-31fb-4d41-8879-a5868140aa65"],"징":["dea15283-31fb-4d41-8879-a5868140aa65"],"려":["dea15283-31fb-4d41-8879-a5868140aa65"],"판":["dea15283-31fb-4d41-8879-a5868140aa65"],"접":["dea15283-31fb-4d41-8879-a5868140aa65"],"근":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"짐":["dea15283-31fb-4d41-8879-a5868140aa65"],"함":["dea15283-31fb-4d41-8879-a5868140aa65"],"올":["dea15283-31fb-4d41-8879-a5868140aa65"],"규":["dea15283-31fb-4d41-8879-a5868140aa65"],"부":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"석":["dea15283-31fb-4d41-8879-a5868140aa65"],"초":["dea15283-31fb-4d41-8879-a5868140aa65"],"행":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"또":["dea15283-31fb-4d41-8879-a5868140aa65"],"견":["dea15283-31fb-4d41-8879-a5868140aa65"],"처":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"파":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"썬":["dea15283-31fb-4d41-8879-a5868140aa65"],"브":["dea15283-31fb-4d41-8879-a5868140aa65"],"오":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"픈":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"와":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"양":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"태":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"존":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"플":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"케":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"메":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"송":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"꽤":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"쓰":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"역":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"같":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"퍼":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"블":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"셔":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"킬":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"무":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"엇":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"든":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"될":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"죠":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"림":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"즈":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"했":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"던":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"내":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"일":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"캡":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"쳐":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"베":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"묘":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"독":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"섭":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"핸":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"복":["989c24f3-a87c-4409-920b-4ac7320e3459"],"테":["989c24f3-a87c-4409-920b-4ac7320e3459"],"팩":["989c24f3-a87c-4409-920b-4ac7320e3459"],"토":["989c24f3-a87c-4409-920b-4ac7320e3459"],"물":["989c24f3-a87c-4409-920b-4ac7320e3459"],"론":["989c24f3-a87c-4409-920b-4ac7320e3459"],"최":["989c24f3-a87c-4409-920b-4ac7320e3459"],"섯":["989c24f3-a87c-4409-920b-4ac7320e3459"],"군":["989c24f3-a87c-4409-920b-4ac7320e3459"],"릿":["989c24f3-a87c-4409-920b-4ac7320e3459"],"타":["989c24f3-a87c-4409-920b-4ac7320e3459"],"냥":["989c24f3-a87c-4409-920b-4ac7320e3459"],"변":["989c24f3-a87c-4409-920b-4ac7320e3459"],"값":["989c24f3-a87c-4409-920b-4ac7320e3459"],"실":["989c24f3-a87c-4409-920b-4ac7320e3459"],"옵":["989c24f3-a87c-4409-920b-4ac7320e3459"],"차":["989c24f3-a87c-4409-920b-4ac7320e3459"],"례":["989c24f3-a87c-4409-920b-4ac7320e3459"],"곳":["989c24f3-a87c-4409-920b-4ac7320e3459"],"막":["989c24f3-a87c-4409-920b-4ac7320e3459"],"경":["989c24f3-a87c-4409-920b-4ac7320e3459"],"순":["989c24f3-a87c-4409-920b-4ac7320e3459"],"런":["989c24f3-a87c-4409-920b-4ac7320e3459"],"설":["989c24f3-a87c-4409-920b-4ac7320e3459"],"패":["989c24f3-a87c-4409-920b-4ac7320e3459"],"티":["989c24f3-a87c-4409-920b-4ac7320e3459"],"항":["989c24f3-a87c-4409-920b-4ac7320e3459"],"외":["989c24f3-a87c-4409-920b-4ac7320e3459"],"거":["989c24f3-a87c-4409-920b-4ac7320e3459"],"진":["989c24f3-a87c-4409-920b-4ac7320e3459"],"렇":["989c24f3-a87c-4409-920b-4ac7320e3459"]},{"게":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"기":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"술":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"블":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"그":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"를":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"선":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"보":["de27e7e3-b624-48a5-9050-0b2f333757b0","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"입":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"니":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"다":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"의":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"클":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"라":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"우":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"드":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"비":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"스":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"삼":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"대":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"축":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"을":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"루":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"는":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"리":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"고":["de27e7e3-b624-48a5-9050-0b2f333757b0","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"릭":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"세":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"프":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"뷰":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"설":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"치":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"글":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","989c24f3-a87c-4409-920b-4ac7320e3459"],"쓰":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"태":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"활":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","989c24f3-a87c-4409-920b-4ac7320e3459"],"할":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"죠":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"먼":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"명":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"령":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"통":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"본":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"격":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"내":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"와":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"같":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"나":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"커":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"텀":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"토":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"픽":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"엔":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"접":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"속":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"키":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"안":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"퍼":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"셔":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"턴":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"듭":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"뿐":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"몇":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"메":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"타":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"필":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"발":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"생":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"성":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"값":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"구":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"분":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"슷":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"됩":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"항":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"외":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"머":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"동":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"처":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"여":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"관":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"좀":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"더":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"싶":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"읽":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"후":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"실":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"평":["dea15283-31fb-4d41-8879-a5868140aa65"],"완":["dea15283-31fb-4d41-8879-a5868140aa65"],"툴":["dea15283-31fb-4d41-8879-a5868140aa65"],"킷":["dea15283-31fb-4d41-8879-a5868140aa65"],"된":["dea15283-31fb-4d41-8879-a5868140aa65"],"깃":["dea15283-31fb-4d41-8879-a5868140aa65"],"허":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"컬":["dea15283-31fb-4d41-8879-a5868140aa65"],"환":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"경":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"직":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"살":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"펴":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"일":["dea15283-31fb-4d41-8879-a5868140aa65"],"레":["dea15283-31fb-4d41-8879-a5868140aa65"],"측":["dea15283-31fb-4d41-8879-a5868140aa65"],"거":["dea15283-31fb-4d41-8879-a5868140aa65"],"류":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"귀":["dea15283-31fb-4d41-8879-a5868140aa65"],"링":["dea15283-31fb-4d41-8879-a5868140aa65"],"유":["dea15283-31fb-4d41-8879-a5868140aa65"],"형":["dea15283-31fb-4d41-8879-a5868140aa65"],"따":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"밀":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"재":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"율":["dea15283-31fb-4d41-8879-a5868140aa65"],"등":["dea15283-31fb-4d41-8879-a5868140aa65"],"합":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"택":["dea15283-31fb-4d41-8879-a5868140aa65"],"차":["dea15283-31fb-4d41-8879-a5868140aa65"],"북":["dea15283-31fb-4d41-8879-a5868140aa65"],"든":["dea15283-31fb-4d41-8879-a5868140aa65"],"쉽":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"뒤":["dea15283-31fb-4d41-8879-a5868140aa65"],"렇":["dea15283-31fb-4d41-8879-a5868140aa65"],"셋":["dea15283-31fb-4d41-8879-a5868140aa65"],"조":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"숫":["dea15283-31fb-4d41-8879-a5868140aa65"],"불":["dea15283-31fb-4d41-8879-a5868140aa65"],"연":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"간":["dea15283-31fb-4d41-8879-a5868140aa65"],"득":["dea15283-31fb-4d41-8879-a5868140aa65"],"달":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"넘":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"종":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"좋":["dea15283-31fb-4d41-8879-a5868140aa65"],"앞":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"언":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"급":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"였":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"던":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"테":["dea15283-31fb-4d41-8879-a5868140aa65"],"배":["dea15283-31fb-4d41-8879-a5868140aa65"],"덱":["dea15283-31fb-4d41-8879-a5868140aa65"],"짧":["dea15283-31fb-4d41-8879-a5868140aa65"],"추":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"끝":["dea15283-31fb-4d41-8879-a5868140aa65"],"났":["dea15283-31fb-4d41-8879-a5868140aa65"],"체":["dea15283-31fb-4d41-8879-a5868140aa65"],"튜":["dea15283-31fb-4d41-8879-a5868140aa65"],"집":["dea15283-31fb-4d41-8879-a5868140aa65"],"얼":["dea15283-31fb-4d41-8879-a5868140aa65"],"각":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"험":["dea15283-31fb-4d41-8879-a5868140aa65"],"양":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"걸":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"쳐":["dea15283-31fb-4d41-8879-a5868140aa65"],"최":["dea15283-31fb-4d41-8879-a5868140aa65"],"객":["dea15283-31fb-4d41-8879-a5868140aa65"],"천":["dea15283-31fb-4d41-8879-a5868140aa65"],"례":["dea15283-31fb-4d41-8879-a5868140aa65"],"복":["dea15283-31fb-4d41-8879-a5868140aa65"],"잡":["dea15283-31fb-4d41-8879-a5868140aa65"],"변":["dea15283-31fb-4d41-8879-a5868140aa65"],"빠":["dea15283-31fb-4d41-8879-a5868140aa65"],"르":["dea15283-31fb-4d41-8879-a5868140aa65"],"산":["dea15283-31fb-4d41-8879-a5868140aa65"],"플":["dea15283-31fb-4d41-8879-a5868140aa65"],"랫":["dea15283-31fb-4d41-8879-a5868140aa65"],"폼":["dea15283-31fb-4d41-8879-a5868140aa65"],"담":["dea15283-31fb-4d41-8879-a5868140aa65"],"진":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"상":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"엄":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"말":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"른":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"긴":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"당":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"문":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"봐":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"도":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"큰":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"없":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"낸":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"받":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"화":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"줍":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"개":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"브":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"적":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"으":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"결":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"않":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"식":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"행":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"바":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"떤":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"알":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"영":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"과":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"료":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"확":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"템":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"릿":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"정":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"깝":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"신":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"방":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"법":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"두":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"코":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"권":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"위":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"주":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"현":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"샘":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"략":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"되":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"또":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"떄":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"름":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"길":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"흐":["989c24f3-a87c-4409-920b-4ac7320e3459"],"묶":["989c24f3-a87c-4409-920b-4ac7320e3459"],"빼":["989c24f3-a87c-4409-920b-4ac7320e3459"],"놓":["989c24f3-a87c-4409-920b-4ac7320e3459"],"럴":["989c24f3-a87c-4409-920b-4ac7320e3459"],"약":["989c24f3-a87c-4409-920b-4ac7320e3459"],"돌":["989c24f3-a87c-4409-920b-4ac7320e3459"],"난":["989c24f3-a87c-4409-920b-4ac7320e3459"],"므":["989c24f3-a87c-4409-920b-4ac7320e3459"],"별":["989c24f3-a87c-4409-920b-4ac7320e3459"],"뀔":["989c24f3-a87c-4409-920b-4ac7320e3459"],"했":["989c24f3-a87c-4409-920b-4ac7320e3459"],"모":["989c24f3-a87c-4409-920b-4ac7320e3459"],"사":["989c24f3-a87c-4409-920b-4ac7320e3459"],"교":["989c24f3-a87c-4409-920b-4ac7320e3459"],"려":["989c24f3-a87c-4409-920b-4ac7320e3459"],"겨":["989c24f3-a87c-4409-920b-4ac7320e3459"],"미":["989c24f3-a87c-4409-920b-4ac7320e3459"],"터":["989c24f3-a87c-4409-920b-4ac7320e3459"],"잘":["989c24f3-a87c-4409-920b-4ac7320e3459"],"표":["989c24f3-a87c-4409-920b-4ac7320e3459"],"봤":["989c24f3-a87c-4409-920b-4ac7320e3459"],"공":["989c24f3-a87c-4409-920b-4ac7320e3459"],"덩":["989c24f3-a87c-4409-920b-4ac7320e3459"],"룹":["989c24f3-a87c-4409-920b-4ac7320e3459"],"져":["989c24f3-a87c-4409-920b-4ac7320e3459"],"갈":["989c24f3-a87c-4409-920b-4ac7320e3459"],"건":["989c24f3-a87c-4409-920b-4ac7320e3459"],"오":["989c24f3-a87c-4409-920b-4ac7320e3459"],"떻":["989c24f3-a87c-4409-920b-4ac7320e3459"],"켜":["989c24f3-a87c-4409-920b-4ac7320e3459"],"버":["989c24f3-a87c-4409-920b-4ac7320e3459"],"납":["989c24f3-a87c-4409-920b-4ac7320e3459"],"러":["989c24f3-a87c-4409-920b-4ac7320e3459"],"릴":["989c24f3-a87c-4409-920b-4ac7320e3459"],"낼":["989c24f3-a87c-4409-920b-4ac7320e3459"],"핵":["989c24f3-a87c-4409-920b-4ac7320e3459"],"심":["989c24f3-a87c-4409-920b-4ac7320e3459"],"곧":["989c24f3-a87c-4409-920b-4ac7320e3459"],"냅":["989c24f3-a87c-4409-920b-4ac7320e3459"],"온":["989c24f3-a87c-4409-920b-4ac7320e3459"],"었":["989c24f3-a87c-4409-920b-4ac7320e3459"],"벌":["989c24f3-a87c-4409-920b-4ac7320e3459"],"았":["989c24f3-a87c-4409-920b-4ac7320e3459"],"림":["989c24f3-a87c-4409-920b-4ac7320e3459"],"볼":["989c24f3-a87c-4409-920b-4ac7320e3459"],"단":["989c24f3-a87c-4409-920b-4ac7320e3459"],"계":["989c24f3-a87c-4409-920b-4ac7320e3459"]},{"중":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"심":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"으":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"현":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"업":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"개":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"발":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"자":["de27e7e3-b624-48a5-9050-0b2f333757b0","989c24f3-a87c-4409-920b-4ac7320e3459"],"들":["de27e7e3-b624-48a5-9050-0b2f333757b0","1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"필":["de27e7e3-b624-48a5-9050-0b2f333757b0","dea15283-31fb-4d41-8879-a5868140aa65"],"적":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"인":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"내":["de27e7e3-b624-48a5-9050-0b2f333757b0","989c24f3-a87c-4409-920b-4ac7320e3459"],"용":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"룰":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"예":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"정":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"많":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"은":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"성":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"원":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"낼":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"됐":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"앞":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"약":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"했":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"거":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"두":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"청":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"핸":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"러":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"검":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"증":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"웹":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"훅":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"펙":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"르":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","989c24f3-a87c-4409-920b-4ac7320e3459"],"소":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"헤":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"반":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"함":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"응":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65"],"답":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"실":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"계":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"일":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"냅":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"코":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"부":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"려":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"렬":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"화":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"금":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"알":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"았":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"급":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"피":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"종":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"임":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"편":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"조":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"꿔":["dea15283-31fb-4d41-8879-a5868140aa65"],"꾸":["dea15283-31fb-4d41-8879-a5868140aa65"],"볼":["dea15283-31fb-4d41-8879-a5868140aa65"],"봄":["dea15283-31fb-4d41-8879-a5868140aa65"],"써":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"무":["dea15283-31fb-4d41-8879-a5868140aa65"],"엇":["dea15283-31fb-4d41-8879-a5868140aa65"],"쉬":["dea15283-31fb-4d41-8879-a5868140aa65"],"염":["dea15283-31fb-4d41-8879-a5868140aa65"],"히":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"야":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"털":["dea15283-31fb-4d41-8879-a5868140aa65"],"역":["dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"존":["dea15283-31fb-4d41-8879-a5868140aa65"],"받":["dea15283-31fb-4d41-8879-a5868140aa65"],"셔":["dea15283-31fb-4d41-8879-a5868140aa65"],"디":["dea15283-31fb-4d41-8879-a5868140aa65"],"탭":["dea15283-31fb-4d41-8879-a5868140aa65"],"컴":["dea15283-31fb-4d41-8879-a5868140aa65"],"퓨":["dea15283-31fb-4d41-8879-a5868140aa65"],"팅":["dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"턴":["dea15283-31fb-4d41-8879-a5868140aa65"],"므":["dea15283-31fb-4d41-8879-a5868140aa65"],"패":["dea15283-31fb-4d41-8879-a5868140aa65"],"찰":["dea15283-31fb-4d41-8879-a5868140aa65"],"률":["dea15283-31fb-4d41-8879-a5868140aa65"],"술":["dea15283-31fb-4d41-8879-a5868140aa65"],"쓰":["dea15283-31fb-4d41-8879-a5868140aa65"],"줘":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"번":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"움":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"따":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"닝":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"포":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"초":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"점":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"맞":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"록":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"겠":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"준":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"항":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"능":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"먼":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"설":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"앱":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"글":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"뷰":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"며":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"제":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"뀔":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"잊":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"마":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"명":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"령":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"엔":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"뒤":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"붙":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"께":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"찾":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"음":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"끝":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"났":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"순":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"모":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"큐":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"젝":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"곧":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"줄":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"까":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"활":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"깃":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"쳐":["989c24f3-a87c-4409-920b-4ac7320e3459"],"당":["989c24f3-a87c-4409-920b-4ac7320e3459"],"맥":["989c24f3-a87c-4409-920b-4ac7320e3459"],"택":["989c24f3-a87c-4409-920b-4ac7320e3459"],"또":["989c24f3-a87c-4409-920b-4ac7320e3459"],"호":["989c24f3-a87c-4409-920b-4ac7320e3459"],"둔":["989c24f3-a87c-4409-920b-4ac7320e3459"],"즈":["989c24f3-a87c-4409-920b-4ac7320e3459"],"신":["989c24f3-a87c-4409-920b-4ac7320e3459"],"뿐":["989c24f3-a87c-4409-920b-4ac7320e3459"],"둘":["989c24f3-a87c-4409-920b-4ac7320e3459"],"얘":["989c24f3-a87c-4409-920b-4ac7320e3459"],"범":["989c24f3-a87c-4409-920b-4ac7320e3459"],"벗":["989c24f3-a87c-4409-920b-4ac7320e3459"],"킨":["989c24f3-a87c-4409-920b-4ac7320e3459"],"각":["989c24f3-a87c-4409-920b-4ac7320e3459"],"낸":["989c24f3-a87c-4409-920b-4ac7320e3459"],"눈":["989c24f3-a87c-4409-920b-4ac7320e3459"],"봐":["989c24f3-a87c-4409-920b-4ac7320e3459"],"처":["989c24f3-a87c-4409-920b-4ac7320e3459"],"즉":["989c24f3-a87c-4409-920b-4ac7320e3459"],"상":["989c24f3-a87c-4409-920b-4ac7320e3459"],"\ud83d":["989c24f3-a87c-4409-920b-4ac7320e3459"],"\ude09":["989c24f3-a87c-4409-920b-4ac7320e3459"],"및":["989c24f3-a87c-4409-920b-4ac7320e3459"],"간":["989c24f3-a87c-4409-920b-4ac7320e3459"],"깁":["989c24f3-a87c-4409-920b-4ac7320e3459"],"느":["989c24f3-a87c-4409-920b-4ac7320e3459"],"황":["989c24f3-a87c-4409-920b-4ac7320e3459"],"끔":["989c24f3-a87c-4409-920b-4ac7320e3459"],"좋":["989c24f3-a87c-4409-920b-4ac7320e3459"],"굉":["989c24f3-a87c-4409-920b-4ac7320e3459"],"장":["989c24f3-a87c-4409-920b-4ac7320e3459"]},{"부":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"탁":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"립":["de27e7e3-b624-48a5-9050-0b2f333757b0"],"릴":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"즈":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"궁":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"우":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"심":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"신":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"➡":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"️":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"무":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","989c24f3-a87c-4409-920b-4ac7320e3459"],"료":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","989c24f3-a87c-4409-920b-4ac7320e3459"],"온":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"강":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"개":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8"],"튜":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"브":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","989c24f3-a87c-4409-920b-4ac7320e3459"],"채":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"널":["1bf92aeb-335f-446d-bb78-ec24ce7a8da8","dea15283-31fb-4d41-8879-a5868140aa65","e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"낼":["dea15283-31fb-4d41-8879-a5868140aa65"],"희":["dea15283-31fb-4d41-8879-a5868140aa65"],"망":["dea15283-31fb-4d41-8879-a5868140aa65"],"금":["dea15283-31fb-4d41-8879-a5868140aa65"],"헙":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"액":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"손":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"관":["e0dc618c-8d19-43ba-a613-f4b7c7c295df","989c24f3-a87c-4409-920b-4ac7320e3459"],"계":["e0dc618c-8d19-43ba-a613-f4b7c7c295df"],"긴":["989c24f3-a87c-4409-920b-4ac7320e3459"],"듬":["989c24f3-a87c-4409-920b-4ac7320e3459"],"쪼":["989c24f3-a87c-4409-920b-4ac7320e3459"],"중":["989c24f3-a87c-4409-920b-4ac7320e3459"],"닉":["989c24f3-a87c-4409-920b-4ac7320e3459"],"함":["989c24f3-a87c-4409-920b-4ac7320e3459"],"낄":["989c24f3-a87c-4409-920b-4ac7320e3459"],"랍":["989c24f3-a87c-4409-920b-4ac7320e3459"],"클":["989c24f3-a87c-4409-920b-4ac7320e3459"],"발":["989c24f3-a87c-4409-920b-4ac7320e3459"],"유":["989c24f3-a87c-4409-920b-4ac7320e3459"]},{},{},{},{},{}],{},["@de27e7e3-b624-48a5-9050-0b2f333757b0","@1bf92aeb-335f-446d-bb78-ec24ce7a8da8","@dea15283-31fb-4d41-8879-a5868140aa65","@e0dc618c-8d19-43ba-a613-f4b7c7c295df","@989c24f3-a87c-4409-920b-4ac7320e3459"]],{"de27e7e3-b624-48a5-9050-0b2f333757b0":{"id":"de27e7e3-b624-48a5-9050-0b2f333757b0","index":"Blog","path":"/posts/2021/01/01/tech-blog-opening/","node":{"title":"Microsoft Korea 기술 블로그를 시작합니다","category":"Announcement","description":"2021년을 맞이해서 Microsoft Korea에서 새롭게 기술 블로그를 선보입니다","content":"\n안녕하세요!\n\n2021년 한국 마이크로소프트에서 새롭게 기술 블로그를 선보입니다. 마이크로소프트의 클라우드 서비스 삼대 축을 이루는 [Microsoft Azure][ms azure], [Microsoft 365][ms 365] 그리고 [Microsoft Power Platform][ms pwpf]을 중심으로 현업 개발자들이 필요로 하는 기술적인 내용들을 다룰 예정입니다.\n\n많은 성원 부탁드립니다!\n\n![Developer Advocate Bit][image-01]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/01/2021-01-01-tech-blog-opening-01.png\n\n[ms azure]: https://azure.microsoft.com/ko-kr/\n[ms 365]: https://www.microsoft.com/ko-kr/microsoft-365\n[ms pwpf]: https://powerplatform.microsoft.com/ko-kr/\n"},"title":"Microsoft Korea 기술 블로그를 시작합니다","content":"\n안녕하세요!\n\n2021년 한국 마이크로소프트에서 새롭게 기술 블로그를 선보입니다. 마이크로소프트의 클라우드 서비스 삼대 축을 이루는 [Microsoft Azure][ms azure], [Microsoft 365][ms 365] 그리고 [Microsoft Power Platform][ms pwpf]을 중심으로 현업 개발자들이 필요로 하는 기술적인 내용들을 다룰 예정입니다.\n\n많은 성원 부탁드립니다!\n\n![Developer Advocate Bit][image-01]\n\n\n[image-01]: https://sa0blogs.blob.core.windows.net/msdevkr/2021/01/2021-01-01-tech-blog-opening-01.png\n\n[ms azure]: https://azure.microsoft.com/ko-kr/\n[ms 365]: https://www.microsoft.com/ko-kr/microsoft-365\n[ms pwpf]: https://powerplatform.microsoft.com/ko-kr/\n"},"1bf92aeb-335f-446d-bb78-ec24ce7a8da8":{"id":"1bf92aeb-335f-446d-bb78-ec24ce7a8da8","index":"Blog","path":"/posts/2021/01/19/cloudevents-for-azure-eventgrid-via-azure-functions/","node":{"title":"애저 펑션과 애저 이벤트그리드간 CloudEvents 형식 이벤트 데이터 주고받기","category":"Azure","description":"이 포스트에서는 애저 펑션의 이벤트그리드 바인딩이 아직 지원하지 않는 CloudEvents 형식의 이벤트 데이터를 다루는 방법에 대해 알아봅니다.","content":"\n[애저 펑션][az fncapp]은 자체적으로 [애저 이벤트그리드][az evtgrd]에 대한 [바인딩 확장 기능][az fncapp binding evtgrd]을 제공하고 있어서 이벤트그리드로 이벤트 데이터를 아주 손쉽게 주고 받을 수 있습니다. 하지만, 현재 바인딩 확장 기능은 아직 정식으로 [CloudEvents][ce] 형식을 지원하지 않는데, 그 이유는 [현재 버전의 SDK][nuget evtgrd legacy]가 아직 CloudEvents 형식을 지원하지 않기 때문입니다. 아마도 [새 버전의 SDK][nuget evtgrd new]가 GA되는 시점이 되면 애저 펑션 확장 기능에서도 이를 지원하지 않을까 예상하는데요, 따라서, 그 때 까지는 CloudEvents 형식을 사용해서 이벤트그리드에 데이터를 주고 받기 위해서 별도의 작업을 해 줘야 합니다. 이 포스트에서는 그 방법에 대해 간단히 정리해 보도록 하겠습니다.\n\n> 이 포스트에서는 [.NET SDK][az sdk evtgrd dotnet]를 대상으로 기술합니다. 다른 언어로도 SDK를 지원하고 있으니, 아래 링크를 클릭해서 새 SDK를 확인해 보세요!\n>\n> * [JavaScript][az sdk evtgrd js]\n> * [Python][az sdk evtgrd python]\n> * [Java][az sdk evtgrd java]\n\n\n## 애저 이벤트그리드 SDK 프리뷰 버전 설치 ##\n\n이 글을 쓰는 현재 새 버전의 애저 이벤트그리드 SDK 버전은 [`4.0.0-beta.4`][nuget evtgrd new]로, 아직 프리뷰 상태입니다. 이 프리뷰 버전의 SDK를 사용하면 CloudEvents 형식의 이벤트 데이터를 활용할 수 있죠. 먼저 아래 명령어를 통해 프리뷰 버전의 SDK를 설치합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=01-dotnet-add-package.sh\n\n이제 본격적으로 이벤트그리드 데이터를 작업해 보도록 하겠습니다!\n\n\n## CloudEvents 형식으로 이벤트 데이터 보내기 ##\n\n애저 CLI에서 이벤트그리드 명령어를 사용하기 위해서는 먼저 아래와 같이 [확장 기능][az cli extensions]을 설치해야 합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=02-az-extension-add.sh\n\n확장 기능을 설치하고 나면, 아래 [애저 CLI][az cli] 명령어를 통해 이벤트그리드 커스텀 토픽의 엔드포인트를 확인합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=03-get-endpoint.sh\n\n그리고, 접속 키는 아래 명령어를 이용해서 확인합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=04-get-access-key.sh\n\n위에서 확인한 엔드포인트와 접속 키를 이용해서 아래와 같이 애저 펑션 안에 이벤트그리드용 데이터 퍼블리셔 인스턴스를 만듭니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=05-create-publisher.cs\n\nCloudEvents 형식의 데이터를 보내기 위해서는 이벤트 데이터 뿐만 아니라 몇 가지 다른 메타 데이터 정보가 필요합니다.\n\n* `source`: 이벤트 발생자. 보통 URL 형식으로 작성합니다.\n* `type`: 이벤트 타입. 이 값을 이용해서 이벤트를 구분합니다. 형식은 `com.example.someevent`와 비슷한 형태가 됩니다.\n* `datacontenttype`: 항상 `application/cloudevents+json` 값으로 지정해 주면 됩니다.\n\n이외에도 다른 메타 데이터 정보가 필요하지만, 나머지는 SDK에서 자동으로 처리해주니 여기서는 크게 상관하지 않습니다.\n\n> CloudEvents 데이터 형식에 대한 내용을 좀 더 확인하고 싶다면, [이 링크][ce spec json]를 읽어보세요!\n\n위 메타 데이터 정보를 이용해 아래와 같이 CloudEvents 데이터를 작성한 후 이벤트그리드로 보내면 됩니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=06-publish-event.cs\n\n위의 방법을 통해 CloudEvents 형식의 이벤트 데이터를 이벤트그리드 커스텀 토픽으로 보낼 수 있게 됐습니다.\n\n\n## CloudEvents 형식으로 이벤트 데이터 받기 ##\n\n앞서 [애저 펑션][az fncapp]에서는 [이벤트그리드 바인딩 확장 기능의 제약][az fncapp binding evtgrd]이 있다고 했습니다. 때문에 CloudEvents 형식의 데이터를 받아 처리하기 위해서는 [HTTP 트리거][az fncapp trigger http]를 이용해야 하는데요, 이 트리거는 두 가지 요청을 동시에 처리해야 합니다.\n\n* 이벤트 핸들러 엔드포인트 검증 요청\n* 이벤트 데이터 처리\n\n\n### 이벤트 핸들러 엔드포인트 검증 요청 ###\n\n[CloudEvents의 웹훅 스펙][ce spec webhook]에 따르면 검증 요청은 `OPTIONS` 메소드를 이용하고 요청 헤더에 반드시 `WebHook-Request-Origin`를 포함합니다 (line #8). 따라서 이 검증 요청에 응답하기 위해서는 이 요청 헤더 값을 응답 헤더의 `WebHook-Allowed-Origin` 값에 실어 보내야 합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=07-validate-request.cs&highlights=8,9\n\n\n### 이벤트 데이터 처리 ###\n\n위와 같이 이벤트 핸들러로서 애저 펑션 엔드포인트 검증에 성공했다면, 애저 이벤트그리드는 앞으로 이벤트 데이터를 계속해서 동일한 엔드포인트로 `POST` 메소드를 이용해 보냅니다. 이 때, CloudEvents 이벤트 데이터 전체를 사용하고 싶다면 아래 코드의 `@event` 인스턴스를 이용하면 되고 (line #18), `data` 부분만 사용하려면 아래 코드와 같이 비직렬화해서 사용합니다 (line #19).\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=08-handle-event.cs&highlights=18,19\n\n위와 같이 CloudEvents 형식의 이벤트 데이터를 이벤트 토픽에서 애저 펑션으로 받아 처리할 수 있게 됐습니다.\n\n---\n\n지금까지 [애저 펑션][az fncapp]에서 [애저 이벤트그리드][az evtgrd]로 [CloudEvents][ce] 형식의 이벤트 데이터를 보내고 받는 방법에 대해 알아 보았습니다. 이 방법은 포스트 안에서 계속 언급했다시피, 현재 [바인딩 확장 기능][az fncapp binding evtgrd]은 아직 CloudEvents 형식을 지원하지 않기 때문에, 일종의 임시방편으로 사용하는 방법입니다. 조만간 새 버전의 확장 기능이 릴리즈 되기를 기대합니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-12565-juyoo\n[az devops free]: https://azure.microsoft.com/ko-kr/services/devops/?WT.mc_id=dotnet-12565-juyoo\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-12565-juyoo\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az cli]: https://docs.microsoft.com/ko-kr/cli/azure/what-is-azure-cli?WT.mc_id=dotnet-12565-juyoo\n[az cli extensions]: https://docs.microsoft.com/ko-kr/cli/azure/azure-cli-extensions-list?WT.mc_id=dotnet-12565-juyoo\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-12565-juyoo\n[az fncapp binding evtgrd]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-event-grid?WT.mc_id=dotnet-12565-juyoo\n[az fncapp trigger http]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp&WT.mc_id=dotnet-12565-juyoo\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=dotnet-12565-juyoo\n[az evtgrd topic custom]: https://docs.microsoft.com/ko-kr/azure/event-grid/custom-topics?WT.mc_id=dotnet-12565-juyoo\n\n[nuget evtgrd legacy]: https://www.nuget.org/packages/Microsoft.Azure.EventGrid/\n[nuget evtgrd new]: https://www.nuget.org/packages/Azure.Messaging.EventGrid/\n\n[az sdk evtgrd dotnet]: https://github.com/Azure/azure-sdk-for-net/tree/master/sdk/eventgrid/Azure.Messaging.EventGrid\n[az sdk evtgrd js]: https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/eventgrid/eventgrid\n[az sdk evtgrd python]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/eventgrid/azure-eventgrid\n[az sdk evtgrd java]: https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventgrid/azure-messaging-eventgrid\n\n[ce]: https://cloudevents.io/\n[ce spec json]: https://github.com/cloudevents/spec/blob/v1.0/json-format.md#23-examples\n[ce spec webhook]: https://github.com/cloudevents/spec/blob/v1.0/http-webhook.md#4-abuse-protection\n"},"title":"애저 펑션과 애저 이벤트그리드간 CloudEvents 형식 이벤트 데이터 주고받기","content":"\n[애저 펑션][az fncapp]은 자체적으로 [애저 이벤트그리드][az evtgrd]에 대한 [바인딩 확장 기능][az fncapp binding evtgrd]을 제공하고 있어서 이벤트그리드로 이벤트 데이터를 아주 손쉽게 주고 받을 수 있습니다. 하지만, 현재 바인딩 확장 기능은 아직 정식으로 [CloudEvents][ce] 형식을 지원하지 않는데, 그 이유는 [현재 버전의 SDK][nuget evtgrd legacy]가 아직 CloudEvents 형식을 지원하지 않기 때문입니다. 아마도 [새 버전의 SDK][nuget evtgrd new]가 GA되는 시점이 되면 애저 펑션 확장 기능에서도 이를 지원하지 않을까 예상하는데요, 따라서, 그 때 까지는 CloudEvents 형식을 사용해서 이벤트그리드에 데이터를 주고 받기 위해서 별도의 작업을 해 줘야 합니다. 이 포스트에서는 그 방법에 대해 간단히 정리해 보도록 하겠습니다.\n\n> 이 포스트에서는 [.NET SDK][az sdk evtgrd dotnet]를 대상으로 기술합니다. 다른 언어로도 SDK를 지원하고 있으니, 아래 링크를 클릭해서 새 SDK를 확인해 보세요!\n>\n> * [JavaScript][az sdk evtgrd js]\n> * [Python][az sdk evtgrd python]\n> * [Java][az sdk evtgrd java]\n\n\n## 애저 이벤트그리드 SDK 프리뷰 버전 설치 ##\n\n이 글을 쓰는 현재 새 버전의 애저 이벤트그리드 SDK 버전은 [`4.0.0-beta.4`][nuget evtgrd new]로, 아직 프리뷰 상태입니다. 이 프리뷰 버전의 SDK를 사용하면 CloudEvents 형식의 이벤트 데이터를 활용할 수 있죠. 먼저 아래 명령어를 통해 프리뷰 버전의 SDK를 설치합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=01-dotnet-add-package.sh\n\n이제 본격적으로 이벤트그리드 데이터를 작업해 보도록 하겠습니다!\n\n\n## CloudEvents 형식으로 이벤트 데이터 보내기 ##\n\n애저 CLI에서 이벤트그리드 명령어를 사용하기 위해서는 먼저 아래와 같이 [확장 기능][az cli extensions]을 설치해야 합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=02-az-extension-add.sh\n\n확장 기능을 설치하고 나면, 아래 [애저 CLI][az cli] 명령어를 통해 이벤트그리드 커스텀 토픽의 엔드포인트를 확인합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=03-get-endpoint.sh\n\n그리고, 접속 키는 아래 명령어를 이용해서 확인합니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=04-get-access-key.sh\n\n위에서 확인한 엔드포인트와 접속 키를 이용해서 아래와 같이 애저 펑션 안에 이벤트그리드용 데이터 퍼블리셔 인스턴스를 만듭니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=05-create-publisher.cs\n\nCloudEvents 형식의 데이터를 보내기 위해서는 이벤트 데이터 뿐만 아니라 몇 가지 다른 메타 데이터 정보가 필요합니다.\n\n* `source`: 이벤트 발생자. 보통 URL 형식으로 작성합니다.\n* `type`: 이벤트 타입. 이 값을 이용해서 이벤트를 구분합니다. 형식은 `com.example.someevent`와 비슷한 형태가 됩니다.\n* `datacontenttype`: 항상 `application/cloudevents+json` 값으로 지정해 주면 됩니다.\n\n이외에도 다른 메타 데이터 정보가 필요하지만, 나머지는 SDK에서 자동으로 처리해주니 여기서는 크게 상관하지 않습니다.\n\n> CloudEvents 데이터 형식에 대한 내용을 좀 더 확인하고 싶다면, [이 링크][ce spec json]를 읽어보세요!\n\n위 메타 데이터 정보를 이용해 아래와 같이 CloudEvents 데이터를 작성한 후 이벤트그리드로 보내면 됩니다.\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=06-publish-event.cs\n\n위의 방법을 통해 CloudEvents 형식의 이벤트 데이터를 이벤트그리드 커스텀 토픽으로 보낼 수 있게 됐습니다.\n\n\n## CloudEvents 형식으로 이벤트 데이터 받기 ##\n\n앞서 [애저 펑션][az fncapp]에서는 [이벤트그리드 바인딩 확장 기능의 제약][az fncapp binding evtgrd]이 있다고 했습니다. 때문에 CloudEvents 형식의 데이터를 받아 처리하기 위해서는 [HTTP 트리거][az fncapp trigger http]를 이용해야 하는데요, 이 트리거는 두 가지 요청을 동시에 처리해야 합니다.\n\n* 이벤트 핸들러 엔드포인트 검증 요청\n* 이벤트 데이터 처리\n\n\n### 이벤트 핸들러 엔드포인트 검증 요청 ###\n\n[CloudEvents의 웹훅 스펙][ce spec webhook]에 따르면 검증 요청은 `OPTIONS` 메소드를 이용하고 요청 헤더에 반드시 `WebHook-Request-Origin`를 포함합니다 (line #8). 따라서 이 검증 요청에 응답하기 위해서는 이 요청 헤더 값을 응답 헤더의 `WebHook-Allowed-Origin` 값에 실어 보내야 합니다 (line #9).\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=07-validate-request.cs&highlights=8,9\n\n\n### 이벤트 데이터 처리 ###\n\n위와 같이 이벤트 핸들러로서 애저 펑션 엔드포인트 검증에 성공했다면, 애저 이벤트그리드는 앞으로 이벤트 데이터를 계속해서 동일한 엔드포인트로 `POST` 메소드를 이용해 보냅니다. 이 때, CloudEvents 이벤트 데이터 전체를 사용하고 싶다면 아래 코드의 `@event` 인스턴스를 이용하면 되고 (line #18), `data` 부분만 사용하려면 아래 코드와 같이 비직렬화해서 사용합니다 (line #19).\n\nhttps://gist.github.com/justinyoo/8282de7244bccca562cd508e64d89470?file=08-handle-event.cs&highlights=18,19\n\n위와 같이 CloudEvents 형식의 이벤트 데이터를 이벤트 토픽에서 애저 펑션으로 받아 처리할 수 있게 됐습니다.\n\n---\n\n지금까지 [애저 펑션][az fncapp]에서 [애저 이벤트그리드][az evtgrd]로 [CloudEvents][ce] 형식의 이벤트 데이터를 보내고 받는 방법에 대해 알아 보았습니다. 이 방법은 포스트 안에서 계속 언급했다시피, 현재 [바인딩 확장 기능][az fncapp binding evtgrd]은 아직 CloudEvents 형식을 지원하지 않기 때문에, 일종의 임시방편으로 사용하는 방법입니다. 조만간 새 버전의 확장 기능이 릴리즈 되기를 기대합니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=dotnet-12565-juyoo\n[az devops free]: https://azure.microsoft.com/ko-kr/services/devops/?WT.mc_id=dotnet-12565-juyoo\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=dotnet-12565-juyoo\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az cli]: https://docs.microsoft.com/ko-kr/cli/azure/what-is-azure-cli?WT.mc_id=dotnet-12565-juyoo\n[az cli extensions]: https://docs.microsoft.com/ko-kr/cli/azure/azure-cli-extensions-list?WT.mc_id=dotnet-12565-juyoo\n\n[az fncapp]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-overview?WT.mc_id=dotnet-12565-juyoo\n[az fncapp binding evtgrd]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-event-grid?WT.mc_id=dotnet-12565-juyoo\n[az fncapp trigger http]: https://docs.microsoft.com/ko-kr/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp&WT.mc_id=dotnet-12565-juyoo\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=dotnet-12565-juyoo\n[az evtgrd topic custom]: https://docs.microsoft.com/ko-kr/azure/event-grid/custom-topics?WT.mc_id=dotnet-12565-juyoo\n\n[nuget evtgrd legacy]: https://www.nuget.org/packages/Microsoft.Azure.EventGrid/\n[nuget evtgrd new]: https://www.nuget.org/packages/Azure.Messaging.EventGrid/\n\n[az sdk evtgrd dotnet]: https://github.com/Azure/azure-sdk-for-net/tree/master/sdk/eventgrid/Azure.Messaging.EventGrid\n[az sdk evtgrd js]: https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/eventgrid/eventgrid\n[az sdk evtgrd python]: https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/eventgrid/azure-eventgrid\n[az sdk evtgrd java]: https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventgrid/azure-messaging-eventgrid\n\n[ce]: https://cloudevents.io/\n[ce spec json]: https://github.com/cloudevents/spec/blob/v1.0/json-format.md#23-examples\n[ce spec webhook]: https://github.com/cloudevents/spec/blob/v1.0/http-webhook.md#4-abuse-protection\n"},"dea15283-31fb-4d41-8879-a5868140aa65":{"id":"dea15283-31fb-4d41-8879-a5868140aa65","index":"Blog","path":"/posts/2021/01/26/towards-fairness-ai-with-fairlearn-and-azure-mlops/","node":{"title":"공정한 & 편향없는 AI를 위한 Fairlearn 및 애저 MLOps 도구 활용","category":"Azure","description":"공정한, 그리고 편향없는 AI를 실현하기 위한 마음가짐/윤리적인 자세도 중요하겠지만, 도구를 잘 활용하여 사용하는 데이터/알고리즘에 대한 편향성을 조기에 발견할 수 있다면 더욱 좋겠죠? Fairlearn 오픈소스와 애저 머신러닝 서비스를 활용한 MLOps 도구를 통해 공정한/편향없는 AI 실현이 어떻게 가능한지 다뤄봅니다.","content":"\n개인의 삶에 영향을 미치는 중요한 결정에 많은 데이터 활용이 이루어지면서 보다 안전하고, 윤리적이면서 책임감있는 사용을 보장하는 AI(인공지능)에 대한 중요성이 대두되고 있습니다. 선한 목적으로 알고리즘을 개발하고 데이터를 활용하더라도 의도하지 않게 성별, 문화적, 민족적 편향성을 AI가 보여준다면 결코 공정하다고 할 수 없을 것입니다.\n\n![애저 머신러닝 - 책임있는 ML](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/responsible-ml.png)\n\n마이크로소프트는 책임감있고 사람들의 신뢰를 보장하는 방식으로 AI 시스템이 개발되도록 AETHER 위원회를 비롯한 작업 그룹들이 주도하는 노력과 지원을 계속하고 있습니다 ([참고][ms-ai-approach]). 그 중, 지난 빌드 2020에서는 애저 머신러닝 서비스를 통해 책임있는 ML을 어떻게 구현하는지에 대한 발표가 있었습니다. 데이터 과학자 및 개발자 분들께서 머신러닝 모델을 보다 잘 <b>이해</b>하고, 데이터를 <b>보호</b>하며 머신러닝 전반 과정을 <b>제어</b>하는 과정을 통해 신뢰할 수 있는 AI를 구축가능하다는 것입니다.\n\n![AI에서의 공정성 (Fairness)](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/ai-and-fairness-from-build-korea-azure-ai.jpg)\n\n지난 2020년 7월, 마이크로소프트 [Data&AI 클라우드 솔루션 아키텍트이신 박소은님][linkedin-soeun-park]이 [Azure AI의 새로운 기능][ms-build-korea-2020-azure-track]에 대해 발표하시면서 AI에서의 공정성 (Fairness)을 말씀해주셨습니다. AI 시스템이 공정하지 않게 동작할 때 발생하는 여러 피해 중, 하나는 서비스 품질 (Quality of Service)에 대한 피해가 있습니다. 제품이 특정 그룹에서는 잘 동작하지만 다른 그룹에서는 다른 품질을 보여준다는 것으로, 어떤 음성인식 시스템에서, 남성의 목소리는 잘 인식하는 반면, 여성의 소리를 잘 인식하지 못한다면 서비스 품질 피해가 있다고 할 수 있습니다. 두 번째로는 할당 (Allocation)에 대한 피해로, 예를 들어 대출 심사나 채용 과정에서 관련없는 특징이 고려되어 판단이 되어 의도하지 않은 할당 피해가 있다는 것입니다. 이러한 문제들을 해결하기 위해서는 AI에 접근할 때 윤리적인 마음가짐과 함께 올바른 규정을 준수하는 부분도 중요하겠지만, 어떻게 모델을 분석하고, 특정 그룹의 사람들에게 부정적인 결과를 초래할 수 있는 이러한 행동들이 AI 시스템에 반영되었는지를 잘 확인하는 방법 또한 중요할 것입니다.\n\n도구를 보다 잘 활용하여 사용하는 데이터 및 알고리즘이 공정한지를 어떻게 발견하고 대처할 수 있을까요? 이번 포스트에서는 머신러닝 시스템을 만들 때, 파이썬 라이브러리인 [Fairlearn][fairlearn-website] 오픈소스와 [애저 머신러닝 서비스][ms-azure-ml-docs]를 활용하여 보다 공정하고 편향없는 AI를 어떻게 실현할 수 있는지에 대해 알아보겠습니다.\n\n## Fairlearn 오픈소스를 사용한 머신러닝 모델 평가 ##\n\nFairlearn은 머신러닝 모델에서 발생할 수 있는 비공정성을 평가하는 기능을 제공하면서 동시에 비공정성을 완화 가능한 알고리즘들을 제공하여 비공정성을 개선하고자 사용하는 오픈소스 툴킷입니다. 파이썬으로 작성된 오픈소스로 [깃허브에 공개][fairlearn-github]되어 있으며, [pip 명령어를 사용][fairlearn-pypi]해 로컬/클라우드 환경에 직접 설치하여 사용하실 수도 있습니다. 본 포스트에서는 비공정성 평가에 대한 부분을 살펴보겠습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=01-pip-install-fairlearn.sh\n\n일반적으로 머신러닝을 사용해 모델을 정의 후 트레이닝 및 예측하는 과정을 거치며, 머신러닝 모델을 평가하기 위해서는 분류(Classification), 회귀 (Regression), 클러스터링과 같은 모델 유형에 따라 정확도 (Accuracy), 정밀도 (Precision), 재현율 (Recall), AUC, MAE, RMSE 등과 같은 여러 지표 (Metric)들을 사용합니다 ([마이크로소프트 문서][ms-docs-ml-algorithm-evaluation-model-metrics]에서 자세한 내용을 영문으로 확인하실 수 있습니다). Fairlearn에서는 공정성을 평가하기 위해 이와 같은 지표들을 기반으로 1) 민감한 피처를 선택하고 2) 성능과 예측 차이에 따른 평가 결과를 확인하는 라이브러리 함수를 제공합니다. 또한, 대시보드를 Jupyter 노트북에서 확인하여 만든 머신러닝 모델이 공정한지를 보다 쉽게 확인도 가능합니다. 참고로, 애저에서는 뒤에서 설명하는 [애저 머신러닝 서비스에서 Jupyter 노트북을 쉽게 실행][ms-azure-ml-jupyter]할 수 있습니다.\n\n![Fairlearn - 모델 평가](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/fairlearn-ml-model-assessment.jpg)\n\n그렇다면, 이제부터는 실제 데이터셋으로 머신러닝 모델을 트레이닝할 때 Fairlearn을 어떻게 사용하는지 살펴보겠습니다. [OpenML에 업로드된 성인 인구조사 데이터셋][openml-adult-census-1590]을 활용해 보겠습니다. [Scikit-learn에서 제공하는 fetch_openml() 함수][scikit-learn-fetch_openml]를 통해 데이터셋 숫자인 1590만 알면 아래 코드 예제와 같이 쉽게 데이터셋을 불러올 수 있습니다. 연간 소득이 5만 달러를 넘는지에 대한 여부를 판단하는 예측 모델을 만들고자 합니다. 여기서 한 가지, 머신러닝 모델 트레이닝을 할 때 성별, 인종과 같은 민감한 피처를 제외하는 것이 좋습니다. 앞에서 언급하였던 할당 피해를 방지할 수 있을 것입니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=02-fetch_openml.py\n\n그리고 머신러닝 모델을 트레이닝할 때, 일반적으로 평가를 위해 데이터를 트레이닝 셋과 테스트 셋으로 분리합니다. 예제에서는 30%를 테스트 셋으로 배정하였으며, 인덱스를 정리하는 짧은 코드를 추가하였습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=03-dataset-split.py\n\n데이터 준비가 이제 다 끝났으니, 모델 트레이닝 및 예측이 가능하겠죠? 예제에서는 [Scikit-learn에서 제공하는 분류를 위한 의사결정트리인 DecisionTreeClassifier][scikit-learn-tree]를 사용해 보겠습니다. 구체적인 `min_samples_leaf` 및 `max_depth` 값 등을 튜닝하는 것도 중요하겠지만, 본 포스트에서는 AI 공정성을 위한 평가를 어떻게 하는지에 집중하도록 하겠습니다. 테스트셋으로 예측한 결과들을 정확도, 정밀도, 재현율 등 지표를 통해 확인할 수 있으나, 해당 지표 자체만으로 머신러닝 모델이 공정성을 얼마나 확보하였는지를 이해하기에는 쉽지 않은 것 같습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=04-training.py\n\nJupyter 노트북에서 Fairlearn 라이브러리에서 제공하는 `FairlearnDashboard()` 함수를 사용하면 대시보드를 불러올 수 있습니다. 함수를 호출할 때, 민감한 피처에 대한 데이터셋과 예측 모델을 지정하면 민감한 피처와 측정하고자 하는 성능 항목을 선택하여 성능과 예측에 대한 차이 (disparity)를 확인하는 대시보드를 제공합니다. 각 민감한 피처 값 유형에 따라 살펴보고자 하는 지표가 과소/과대 예측이 되었는지에 대한 성능 차이 및 데이터 선택에 따른 공정성이 있는지에 대한 예측 차이를 확인할 수 있습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=05-fairlearn-dashboard.py\n\n## MLOps 실현을 위한 애저 머신러닝 서비스에 모델 & 실험 업로드 ##\n\n방대한 양의 데이터에서부터 머신러닝 모델이 여러 트레이닝 및 예측, 튜닝 과정을 걸쳐 완성되어도, 실제 서비스화를 위해서는 성능 최적화와 함께 트레이닝 데이터 및 모델에 대한 모니터링 및 관리 등 많은 과정이 있습니다. [애저 머신러닝 서비스][ms-azure-ml-service-page]는 사람, 프로세스, 제품이 함께 결합하여 최종 고객에게 가치를 지속적으로 전달한다는 DevOps를 넘어서, 이러한 전반적인 머신러닝을 고려한 MLOps 실천 사례 경험을 반영한 애저 서비스입니다. 복잡한 데이터셋 변화와 발전하는 머신러닝 모델에 대한 추적 뿐만 아니라, 보다 빠르게 머신러닝 모델을 빌드하고 학습, 배포할 수 있는 다양한 생산적인 환경을 개발자와 데이터 과학자에게 제공하고 있습니다. (MLOps에 대한 자세한 내용은 마이크로소프트에서 AI 플랫폼을 담당하시는 [한석진님][linkedin-seokjin-han]이 공유주신 [MLOps 101 영상][yt-mlops-101-seokjin]을 통해 확인하실 수 있습니다.)\n\n- 실험: 머신러닝을 하는 과정은 1) 데이터셋 준비 2) 모델 트레이닝을 위한 피처 선택 3) 알고리즘 선택 및 파라미터 지정 4) 트레이닝 수행이라는 과정을 거쳐 하나의 머신러닝 모델이 만들어집니다. 이를 애저 머신러닝 서비스에서는 실험이라는 단위로 추상화를 하였습니다. 예를 들어 위 예제에서 테스트셋 비율을 30%로, DecisionTreeClassifier를 사용하여 `min_samples_leaf` 값은 10으로, `max_depth` 값은 4로 지정하였는데, 이 전체를 실행했던 과정을 하나의 실험으로 보는 것입니다. 같은 실험을 반복해서 실행하기도 하며, 데이터셋을 바꿔서 다시 실행하거나, `max_depth` 값을 3으로 바꾸어서 트레이닝을 한다면 또 다른 실험 단위를 실행할 수도 있겠죠.\n\n- 모델: 실험 과정을 거쳐, 반복 & 재사용이 가능한 모델이라는 단위도 생각해볼 수 있습니다. 모델은 1) 어떤 머신러닝 알고리즘을 선택하는지 2) 어떤 파라미터 값을 사용하는지에 대한 내용을 가지는 추상화 단위입니다. 이렇게 모델을 실험과 따로 분리하여 살펴봄으로써, 동일한 모델이 서로 다른 데이터셋을 사용하여 실험할 때 어떤 결과 차이를 보이는지 확인할 수가 있을 것입니다.\n\n무엇보다 애저 머신러닝 서비스는 책임있는 ML을 위한 머신러닝 모델 **이해**, 데이터 **보호**, 전체 과정 **제어**를 위한 쉬운 도구 연계를 염두한 서비스라는 특징을 가지고 있습니다. 위에서 살펴본 Fairlearn의 경우, AI 공정성을 보장하기 위한 머신러닝 모델 이해와 관련이 있는데요, 애저 머신러닝 서비스에서는 Fairlearn 오픈소스와 연동이 가능하여 애저 머신러닝 서비스 UI에서 모델과 실험 단위로 Fairlearn 대시보드를 살펴볼 수 있습니다. 이제부터는 애저 머신러닝 서비스에서 실험과 모델이 어떻게 관리되는지 간단히 살펴보고, 위에서 만든 머신러닝 모델을 애저 머신러닝 서비스에 모델 및 실험 단위로 업로드하여 책임있는 ML을 위해 MLOps를 어떻게 활용할 수 있는지를 살펴보고자 합니다.\n\n업로드를 위해서는 애저 머신러닝 서비스라는 리소스를 만들어야겠죠? 애저 포털에서 애저 머신러닝 서비스를 만드는 방법은 [마이크로소프트 Learn에 설명된 머신러닝 소개 및 작업 영역][ms-learn-azure-ml-workspace] 내용을 참고하실 수 있습니다. 애저 머신러닝 서비스를 쉽게 연결하려면 [azureml-sdk][azureml-sdk-pypi] 및 관련 라이브러리가 필요합니다. 애저 머신러닝 노트북에 대한 한 예제 파일에 나와있는 아래 내용을 통해 의존성있는 라이브러리 목록을 확인할 수 있습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=05-2-upload-fairness-dashboard.yml\n\n애저 머신러닝 서비스 접속 구성을 담고 있는 `config.json` 파일이 필요합니다. 해당 파일은 애저 머신러닝 서비스 리소스를 애저에서 만든 다음 받으셔서 로컬 및 다른 개발 환경에서 연결하실 수도 있으며, 아니면 애저 머신러닝 스튜디오를 실행한 후, Notebooks 탭에서 Jupyter 노트북을 작성하면 추가한 컴퓨팅 자원에서 바로 `config.json` 파일을 불러오실 수도 있습니다.\n\n![Azure Machine Learning Service - config.json 다운로드](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/azure-ml-download-config.png)\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=06-azureml-config.py\n\n그 다음으로, 애저 머신러닝 서비스에 모델을 등록합니다. 이때, 등록할 모델은 이전에 [Scikit-learn에서 제공하는 분류를 위한 의사결정트리인 DecisionTreeClassifier][scikit-learn-tree]를 사용하였고, 구체적인 `min_samples_leaf` 및 `max_depth` 값을 지정하였던, 개체 인스턴스에 대응합니다. 모델을 등록하면 모델 ID 값을 반환하는데, 이 값은 바로 다음에 실험을 추가할 때 사용하므로 변수에 저장해두고자 합니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=07-azure-model-reg.py\n\n애저 머신러닝 서비스에서 Fairlearn에서 실행했던 결과를 포함해 실험으로 관리할 수 있습니다. 이렇게 관리를 하려면 Fairlearn으로 실행한 결과를 계산하여 저장해 두고 있어야겠죠. [fairlearn.metrics][fairlearn-metrics-package] 패키지에 있는 `_create_group_metric_set()` 함수를 통해 미리 계산한 결과를 저장합니다. \n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=08-fairlearn-metric-calc.py\n\n다음으로 애저 머신러닝 서비스에 실험 단위로 업로드합니다. [azureml.core.Experiment 클래스][ms-azureml-core-experiment-class] 인스턴스를 생성한 후, 업로드를 진행합니다. 이 때, 바로 이전에 Fairlearn에서 계산된 결과를 Experiment 인스턴스에 같이 전달합니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=09-azureml-upload.py\n\n이제, 애저 머신러닝 서비스에서 어떻게 보이는지 확인해보면 되겠죠? 애저 머신러닝 스튜디오에서 실험 -> 목록 선택 -> 실행 단위를 선택한 다음, 공정성 탭에 들어가면 확인하실 수 있습니다. 코드 예제와 함께 단계별로 살펴보았는데요, 애저 머신러닝 서비스를 사용한다면 공정성에 대한 부분을 개발자는 Fairlearn으로 관련 지표를 계산하여 업로드하며, 관리자 / 머신러닝 종사자는 애저 머신러닝 스튜디오 UI에서 실험 및 모델 단위로 공정성에 대한 지표를 UI를 통해 쉽게 확인할 수가 있습니다. 또한, 모니터링이나 전체 머신러닝 프로세스를 코드로 잘 관리한다면, 책임있는 ML을 MLOps 실천 사례에 따라 실현할 수 있으며, 구성원 모두 및 외부에도 보다 신뢰있는 AI라고 할 수 있을 것입니다.\n\n![애저 머신러닝 서비스 - 스튜디오에서 공정성 확인](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/azure-ml-studio-fairness.png)\n\n이와 같이, 머신러닝 솔루션이 공정하고 예측의 가치를 이해하고 설명하기 쉽도록 하려면 개발자와 데이터 과학자가 AI 시스템의 공정성을 평가하고 관찰된 불공정 문제를 완화하는 데 사용할 수 있는 프로세스를 도구와 함께 구축하는 것이 중요합니다. 2021년 1월 개최된 CES 2021에서 마이크로소프트 최고법률책임자인 브래드 스미스는 \"기술에는 양심이 없지만 사람에게는 있다\"며 \"기술이 어떤 방식으로 쓰이든 그것은 사람의 책임\"이라고 이야기하였습니다. 이번 포스트에서 소개된 머신러닝 도구 및 실천사례가 잘 활용되어, 보다 공정한, 그리고 편향없는 AI와 함께 모두 지낼 수 있기를 희망합니다.\n\n> 이 포스트에 쓰인 예제 Jupyter 노트북 코드를 [여기](https://github.com/ianychoi/Azure-oss-hands-on-labs/blob/master/06-Azure-ML-with-Fairlearn/fairlearn-quickstart-on-AzureMLStudio.ipynb)에서 확인해 보세요!\n\n그리고 영문으로 되어 있지만, Fairlearn에 대해 자세하게 설명한 많은 내용이 있으며, 해당 내용을 참고하여 본 포스트를 작성하였습니다:\n- [Fairlearn - A Python package to assess AI system's fairness][ms-tc-fairlearn]\n- [Microsoft Docs: What is responsible machine learning?][ms-docs-responsible-ml]\n- [Fairlearn: A toolkit for assessing and improving fairness in AI][ms-research-fairlearn]\n- [Creating Fair Machine Learning Models with Fairlearn][towardsdatascience-tutorial-fairness]\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][ms-az-account-free]\n* 애저 머신러닝 서비스에 관심이 있으신가요? ➡️ [애저 머신러닝 서비스 살펴보기][ms-azure-ml-service-page]\n* 애저에서 머신러닝을 한다는 것은 무엇일까요? ➡️ [한석진님이 쓰신 기고를 살펴보세요][seokjin-azure-and-ml]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms-learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt-msdevkr]\n\n[ms-az-account-free]: https://azure.microsoft.com/ko-kr/free/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-azure-ml-service-page]: https://azure.microsoft.com/ko-kr/services/machine-learning/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-learn]: https://docs.microsoft.com/ko-kr/learn/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[yt-msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[fairlearn-website]: https://fairlearn.github.io\n[fairlearn-github]: https://github.com/fairlearn/fairlearn\n[fairlearn-pypi]: https://pypi.org/project/fairlearn/\n[openml-adult-census-1590]: https://www.openml.org/d/1590\n[scikit-learn-fetch_openml]: https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_openml.html\n[scikit-learn-tree]: https://scikit-learn.org/stable/modules/tree.html\n[scikit-learn-model-evaluation]: https://scikit-learn.org/stable/modules/model_evaluation.html\n[yt-mlops-101-seokjin]: https://www.youtube.com/playlist?list=PLDZRZwFT9Wku509LgbJviEcHxX4AYj3QP\n[azureml-sdk-pypi]: https://pypi.org/project/azureml-sdk/\n[fairlearn-metrics-package]: https://fairlearn.github.io/v0.5.0/api_reference/fairlearn.metrics.html\n[towardsdatascience-tutorial-fairness]: https://towardsdatascience.com/a-tutorial-on-fairness-in-machine-learning-3ff8ba1040cb\n[seokjin-azure-and-ml]: http://it.chosun.com/site/data/html_dir/2020/08/02/2020080200103.html\n[linkedin-soeun-park]: https://www.linkedin.com/in/soeun-park-b55613176/\n[linkedin-seokjin-han]: https://www.linkedin.com/in/seokjinhan/\n\n[ms-ai-approach]: https://www.microsoft.com/ko-kr/ai/our-approach?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-build-korea-2020-azure-track]: https://info.microsoft.com/AP-AzureINFRA-WBNR-FY21-07Jul-23-BuildKorea-SRDEM31279_LP02OnDemandRegistration-ForminBody.html?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-docs-ml-algorithm-evaluation-model-metrics]: https://docs.microsoft.com/en-us/azure/machine-learning/algorithm-module-reference/evaluate-model#metrics?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-learn-azure-ml-workspace]: https://docs.microsoft.com/ko-kr/learn/modules/intro-to-azure-machine-learning-service/2-azure-ml-workspace?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-azureml-core-experiment-class]: https://docs.microsoft.com/ko-kr/python/api/azureml-core/azureml.core.experiment(class)?view=azure-ml-py&ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-tc-fairlearn]: https://techcommunity.microsoft.com/t5/educator-developer-blog/fairlearn-a-python-package-to-assess-ai-system-s-fairness/ba-p/1402950?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-docs-responsible-ml]: https://docs.microsoft.com/en-us/azure/machine-learning/concept-responsible-ml?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-research-fairlearn]: https://www.microsoft.com/en-us/research/publication/fairlearn-a-toolkit-for-assessing-and-improving-fairness-in-ai/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-azure-ml-jupyter]: https://docs.microsoft.com/ko-kr/azure/machine-learning/how-to-run-jupyter-notebooks/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-azure-ml-docs]: https://docs.microsoft.com/ko-kr/azure/machine-learning/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n"},"title":"공정한 & 편향없는 AI를 위한 Fairlearn 및 애저 MLOps 도구 활용","content":"\n개인의 삶에 영향을 미치는 중요한 결정에 많은 데이터 활용이 이루어지면서 보다 안전하고, 윤리적이면서 책임감있는 사용을 보장하는 AI(인공지능)에 대한 중요성이 대두되고 있습니다. 선한 목적으로 알고리즘을 개발하고 데이터를 활용하더라도 의도하지 않게 성별, 문화적, 민족적 편향성을 AI가 보여준다면 결코 공정하다고 할 수 없을 것입니다.\n\n![애저 머신러닝 - 책임있는 ML](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/responsible-ml.png)\n\n마이크로소프트는 책임감있고 사람들의 신뢰를 보장하는 방식으로 AI 시스템이 개발되도록 AETHER 위원회를 비롯한 작업 그룹들이 주도하는 노력과 지원을 계속하고 있습니다 ([참고][ms-ai-approach]). 그 중, 지난 빌드 2020에서는 애저 머신러닝 서비스를 통해 책임있는 ML을 어떻게 구현하는지에 대한 발표가 있었습니다. 데이터 과학자 및 개발자 분들께서 머신러닝 모델을 보다 잘 <b>이해</b>하고, 데이터를 <b>보호</b>하며 머신러닝 전반 과정을 <b>제어</b>하는 과정을 통해 신뢰할 수 있는 AI를 구축가능하다는 것입니다.\n\n![AI에서의 공정성 (Fairness)](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/ai-and-fairness-from-build-korea-azure-ai.jpg)\n\n지난 2020년 7월, 마이크로소프트 [Data&AI 클라우드 솔루션 아키텍트이신 박소은님][linkedin-soeun-park]이 [Azure AI의 새로운 기능][ms-build-korea-2020-azure-track]에 대해 발표하시면서 AI에서의 공정성 (Fairness)을 말씀해주셨습니다. AI 시스템이 공정하지 않게 동작할 때 발생하는 여러 피해 중, 하나는 서비스 품질 (Quality of Service)에 대한 피해가 있습니다. 제품이 특정 그룹에서는 잘 동작하지만 다른 그룹에서는 다른 품질을 보여준다는 것으로, 어떤 음성인식 시스템에서, 남성의 목소리는 잘 인식하는 반면, 여성의 소리를 잘 인식하지 못한다면 서비스 품질 피해가 있다고 할 수 있습니다. 두 번째로는 할당 (Allocation)에 대한 피해로, 예를 들어 대출 심사나 채용 과정에서 관련없는 특징이 고려되어 판단이 되어 의도하지 않은 할당 피해가 있다는 것입니다. 이러한 문제들을 해결하기 위해서는 AI에 접근할 때 윤리적인 마음가짐과 함께 올바른 규정을 준수하는 부분도 중요하겠지만, 어떻게 모델을 분석하고, 특정 그룹의 사람들에게 부정적인 결과를 초래할 수 있는 이러한 행동들이 AI 시스템에 반영되었는지를 잘 확인하는 방법 또한 중요할 것입니다.\n\n도구를 보다 잘 활용하여 사용하는 데이터 및 알고리즘이 공정한지를 어떻게 발견하고 대처할 수 있을까요? 이번 포스트에서는 머신러닝 시스템을 만들 때, 파이썬 라이브러리인 [Fairlearn][fairlearn-website] 오픈소스와 [애저 머신러닝 서비스][ms-azure-ml-docs]를 활용하여 보다 공정하고 편향없는 AI를 어떻게 실현할 수 있는지에 대해 알아보겠습니다.\n\n## Fairlearn 오픈소스를 사용한 머신러닝 모델 평가 ##\n\nFairlearn은 머신러닝 모델에서 발생할 수 있는 비공정성을 평가하는 기능을 제공하면서 동시에 비공정성을 완화 가능한 알고리즘들을 제공하여 비공정성을 개선하고자 사용하는 오픈소스 툴킷입니다. 파이썬으로 작성된 오픈소스로 [깃허브에 공개][fairlearn-github]되어 있으며, [pip 명령어를 사용][fairlearn-pypi]해 로컬/클라우드 환경에 직접 설치하여 사용하실 수도 있습니다. 본 포스트에서는 비공정성 평가에 대한 부분을 살펴보겠습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=01-pip-install-fairlearn.sh\n\n일반적으로 머신러닝을 사용해 모델을 정의 후 트레이닝 및 예측하는 과정을 거치며, 머신러닝 모델을 평가하기 위해서는 분류(Classification), 회귀 (Regression), 클러스터링과 같은 모델 유형에 따라 정확도 (Accuracy), 정밀도 (Precision), 재현율 (Recall), AUC, MAE, RMSE 등과 같은 여러 지표 (Metric)들을 사용합니다 ([마이크로소프트 문서][ms-docs-ml-algorithm-evaluation-model-metrics]에서 자세한 내용을 영문으로 확인하실 수 있습니다). Fairlearn에서는 공정성을 평가하기 위해 이와 같은 지표들을 기반으로 1) 민감한 피처를 선택하고 2) 성능과 예측 차이에 따른 평가 결과를 확인하는 라이브러리 함수를 제공합니다. 또한, 대시보드를 Jupyter 노트북에서 확인하여 만든 머신러닝 모델이 공정한지를 보다 쉽게 확인도 가능합니다. 참고로, 애저에서는 뒤에서 설명하는 [애저 머신러닝 서비스에서 Jupyter 노트북을 쉽게 실행][ms-azure-ml-jupyter]할 수 있습니다.\n\n![Fairlearn - 모델 평가](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/fairlearn-ml-model-assessment.jpg)\n\n그렇다면, 이제부터는 실제 데이터셋으로 머신러닝 모델을 트레이닝할 때 Fairlearn을 어떻게 사용하는지 살펴보겠습니다. [OpenML에 업로드된 성인 인구조사 데이터셋][openml-adult-census-1590]을 활용해 보겠습니다. [Scikit-learn에서 제공하는 fetch_openml() 함수][scikit-learn-fetch_openml]를 통해 데이터셋 숫자인 1590만 알면 아래 코드 예제와 같이 쉽게 데이터셋을 불러올 수 있습니다. 연간 소득이 5만 달러를 넘는지에 대한 여부를 판단하는 예측 모델을 만들고자 합니다. 여기서 한 가지, 머신러닝 모델 트레이닝을 할 때 성별, 인종과 같은 민감한 피처를 제외하는 것이 좋습니다. 앞에서 언급하였던 할당 피해를 방지할 수 있을 것입니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=02-fetch_openml.py\n\n그리고 머신러닝 모델을 트레이닝할 때, 일반적으로 평가를 위해 데이터를 트레이닝 셋과 테스트 셋으로 분리합니다. 예제에서는 30%를 테스트 셋으로 배정하였으며, 인덱스를 정리하는 짧은 코드를 추가하였습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=03-dataset-split.py\n\n데이터 준비가 이제 다 끝났으니, 모델 트레이닝 및 예측이 가능하겠죠? 예제에서는 [Scikit-learn에서 제공하는 분류를 위한 의사결정트리인 DecisionTreeClassifier][scikit-learn-tree]를 사용해 보겠습니다. 구체적인 `min_samples_leaf` 및 `max_depth` 값 등을 튜닝하는 것도 중요하겠지만, 본 포스트에서는 AI 공정성을 위한 평가를 어떻게 하는지에 집중하도록 하겠습니다. 테스트셋으로 예측한 결과들을 정확도, 정밀도, 재현율 등 지표를 통해 확인할 수 있으나, 해당 지표 자체만으로 머신러닝 모델이 공정성을 얼마나 확보하였는지를 이해하기에는 쉽지 않은 것 같습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=04-training.py\n\nJupyter 노트북에서 Fairlearn 라이브러리에서 제공하는 `FairlearnDashboard()` 함수를 사용하면 대시보드를 불러올 수 있습니다. 함수를 호출할 때, 민감한 피처에 대한 데이터셋과 예측 모델을 지정하면 민감한 피처와 측정하고자 하는 성능 항목을 선택하여 성능과 예측에 대한 차이 (disparity)를 확인하는 대시보드를 제공합니다. 각 민감한 피처 값 유형에 따라 살펴보고자 하는 지표가 과소/과대 예측이 되었는지에 대한 성능 차이 및 데이터 선택에 따른 공정성이 있는지에 대한 예측 차이를 확인할 수 있습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=05-fairlearn-dashboard.py\n\n## MLOps 실현을 위한 애저 머신러닝 서비스에 모델 & 실험 업로드 ##\n\n방대한 양의 데이터에서부터 머신러닝 모델이 여러 트레이닝 및 예측, 튜닝 과정을 걸쳐 완성되어도, 실제 서비스화를 위해서는 성능 최적화와 함께 트레이닝 데이터 및 모델에 대한 모니터링 및 관리 등 많은 과정이 있습니다. [애저 머신러닝 서비스][ms-azure-ml-service-page]는 사람, 프로세스, 제품이 함께 결합하여 최종 고객에게 가치를 지속적으로 전달한다는 DevOps를 넘어서, 이러한 전반적인 머신러닝을 고려한 MLOps 실천 사례 경험을 반영한 애저 서비스입니다. 복잡한 데이터셋 변화와 발전하는 머신러닝 모델에 대한 추적 뿐만 아니라, 보다 빠르게 머신러닝 모델을 빌드하고 학습, 배포할 수 있는 다양한 생산적인 환경을 개발자와 데이터 과학자에게 제공하고 있습니다. (MLOps에 대한 자세한 내용은 마이크로소프트에서 AI 플랫폼을 담당하시는 [한석진님][linkedin-seokjin-han]이 공유주신 [MLOps 101 영상][yt-mlops-101-seokjin]을 통해 확인하실 수 있습니다.)\n\n- 실험: 머신러닝을 하는 과정은 1) 데이터셋 준비 2) 모델 트레이닝을 위한 피처 선택 3) 알고리즘 선택 및 파라미터 지정 4) 트레이닝 수행이라는 과정을 거쳐 하나의 머신러닝 모델이 만들어집니다. 이를 애저 머신러닝 서비스에서는 실험이라는 단위로 추상화를 하였습니다. 예를 들어 위 예제에서 테스트셋 비율을 30%로, DecisionTreeClassifier를 사용하여 `min_samples_leaf` 값은 10으로, `max_depth` 값은 4로 지정하였는데, 이 전체를 실행했던 과정을 하나의 실험으로 보는 것입니다. 같은 실험을 반복해서 실행하기도 하며, 데이터셋을 바꿔서 다시 실행하거나, `max_depth` 값을 3으로 바꾸어서 트레이닝을 한다면 또 다른 실험 단위를 실행할 수도 있겠죠.\n\n- 모델: 실험 과정을 거쳐, 반복 & 재사용이 가능한 모델이라는 단위도 생각해볼 수 있습니다. 모델은 1) 어떤 머신러닝 알고리즘을 선택하는지 2) 어떤 파라미터 값을 사용하는지에 대한 내용을 가지는 추상화 단위입니다. 이렇게 모델을 실험과 따로 분리하여 살펴봄으로써, 동일한 모델이 서로 다른 데이터셋을 사용하여 실험할 때 어떤 결과 차이를 보이는지 확인할 수가 있을 것입니다.\n\n무엇보다 애저 머신러닝 서비스는 책임있는 ML을 위한 머신러닝 모델 **이해**, 데이터 **보호**, 전체 과정 **제어**를 위한 쉬운 도구 연계를 염두한 서비스라는 특징을 가지고 있습니다. 위에서 살펴본 Fairlearn의 경우, AI 공정성을 보장하기 위한 머신러닝 모델 이해와 관련이 있는데요, 애저 머신러닝 서비스에서는 Fairlearn 오픈소스와 연동이 가능하여 애저 머신러닝 서비스 UI에서 모델과 실험 단위로 Fairlearn 대시보드를 살펴볼 수 있습니다. 이제부터는 애저 머신러닝 서비스에서 실험과 모델이 어떻게 관리되는지 간단히 살펴보고, 위에서 만든 머신러닝 모델을 애저 머신러닝 서비스에 모델 및 실험 단위로 업로드하여 책임있는 ML을 위해 MLOps를 어떻게 활용할 수 있는지를 살펴보고자 합니다.\n\n업로드를 위해서는 애저 머신러닝 서비스라는 리소스를 만들어야겠죠? 애저 포털에서 애저 머신러닝 서비스를 만드는 방법은 [마이크로소프트 Learn에 설명된 머신러닝 소개 및 작업 영역][ms-learn-azure-ml-workspace] 내용을 참고하실 수 있습니다. 애저 머신러닝 서비스를 쉽게 연결하려면 [azureml-sdk][azureml-sdk-pypi] 및 관련 라이브러리가 필요합니다. 애저 머신러닝 노트북에 대한 한 예제 파일에 나와있는 아래 내용을 통해 의존성있는 라이브러리 목록을 확인할 수 있습니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=05-2-upload-fairness-dashboard.yml\n\n애저 머신러닝 서비스 접속 구성을 담고 있는 `config.json` 파일이 필요합니다. 해당 파일은 애저 머신러닝 서비스 리소스를 애저에서 만든 다음 받으셔서 로컬 및 다른 개발 환경에서 연결하실 수도 있으며, 아니면 애저 머신러닝 스튜디오를 실행한 후, Notebooks 탭에서 Jupyter 노트북을 작성하면 추가한 컴퓨팅 자원에서 바로 `config.json` 파일을 불러오실 수도 있습니다.\n\n![Azure Machine Learning Service - config.json 다운로드](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/azure-ml-download-config.png)\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=06-azureml-config.py\n\n그 다음으로, 애저 머신러닝 서비스에 모델을 등록합니다. 이때, 등록할 모델은 이전에 [Scikit-learn에서 제공하는 분류를 위한 의사결정트리인 DecisionTreeClassifier][scikit-learn-tree]를 사용하였고, 구체적인 `min_samples_leaf` 및 `max_depth` 값을 지정하였던, 개체 인스턴스에 대응합니다. 모델을 등록하면 모델 ID 값을 반환하는데, 이 값은 바로 다음에 실험을 추가할 때 사용하므로 변수에 저장해두고자 합니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=07-azure-model-reg.py\n\n애저 머신러닝 서비스에서 Fairlearn에서 실행했던 결과를 포함해 실험으로 관리할 수 있습니다. 이렇게 관리를 하려면 Fairlearn으로 실행한 결과를 계산하여 저장해 두고 있어야겠죠. [fairlearn.metrics][fairlearn-metrics-package] 패키지에 있는 `_create_group_metric_set()` 함수를 통해 미리 계산한 결과를 저장합니다. \n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=08-fairlearn-metric-calc.py\n\n다음으로 애저 머신러닝 서비스에 실험 단위로 업로드합니다. [azureml.core.Experiment 클래스][ms-azureml-core-experiment-class] 인스턴스를 생성한 후, 업로드를 진행합니다. 이 때, 바로 이전에 Fairlearn에서 계산된 결과를 Experiment 인스턴스에 같이 전달합니다.\n\nhttps://gist.github.com/ianychoi/3850d7c34c76aa2e6219db698ed57241?file=09-azureml-upload.py\n\n이제, 애저 머신러닝 서비스에서 어떻게 보이는지 확인해보면 되겠죠? 애저 머신러닝 스튜디오에서 실험 -> 목록 선택 -> 실행 단위를 선택한 다음, 공정성 탭에 들어가면 확인하실 수 있습니다. 코드 예제와 함께 단계별로 살펴보았는데요, 애저 머신러닝 서비스를 사용한다면 공정성에 대한 부분을 개발자는 Fairlearn으로 관련 지표를 계산하여 업로드하며, 관리자 / 머신러닝 종사자는 애저 머신러닝 스튜디오 UI에서 실험 및 모델 단위로 공정성에 대한 지표를 UI를 통해 쉽게 확인할 수가 있습니다. 또한, 모니터링이나 전체 머신러닝 프로세스를 코드로 잘 관리한다면, 책임있는 ML을 MLOps 실천 사례에 따라 실현할 수 있으며, 구성원 모두 및 외부에도 보다 신뢰있는 AI라고 할 수 있을 것입니다.\n\n![애저 머신러닝 서비스 - 스튜디오에서 공정성 확인](https://raw.githubusercontent.com/ianychoi/Azure-oss-hands-on-labs/master/06-Azure-ML-with-Fairlearn/_images/azure-ml-studio-fairness.png)\n\n이와 같이, 머신러닝 솔루션이 공정하고 예측의 가치를 이해하고 설명하기 쉽도록 하려면 개발자와 데이터 과학자가 AI 시스템의 공정성을 평가하고 관찰된 불공정 문제를 완화하는 데 사용할 수 있는 프로세스를 도구와 함께 구축하는 것이 중요합니다. 2021년 1월 개최된 CES 2021에서 마이크로소프트 최고법률책임자인 브래드 스미스는 \"기술에는 양심이 없지만 사람에게는 있다\"며 \"기술이 어떤 방식으로 쓰이든 그것은 사람의 책임\"이라고 이야기하였습니다. 이번 포스트에서 소개된 머신러닝 도구 및 실천사례가 잘 활용되어, 보다 공정한, 그리고 편향없는 AI와 함께 모두 지낼 수 있기를 희망합니다.\n\n> 이 포스트에 쓰인 예제 Jupyter 노트북 코드를 [여기](https://github.com/ianychoi/Azure-oss-hands-on-labs/blob/master/06-Azure-ML-with-Fairlearn/fairlearn-quickstart-on-AzureMLStudio.ipynb)에서 확인해 보세요!\n\n그리고 영문으로 되어 있지만, Fairlearn에 대해 자세하게 설명한 많은 내용이 있으며, 해당 내용을 참고하여 본 포스트를 작성하였습니다:\n- [Fairlearn - A Python package to assess AI system's fairness][ms-tc-fairlearn]\n- [Microsoft Docs: What is responsible machine learning?][ms-docs-responsible-ml]\n- [Fairlearn: A toolkit for assessing and improving fairness in AI][ms-research-fairlearn]\n- [Creating Fair Machine Learning Models with Fairlearn][towardsdatascience-tutorial-fairness]\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][ms-az-account-free]\n* 애저 머신러닝 서비스에 관심이 있으신가요? ➡️ [애저 머신러닝 서비스 살펴보기][ms-azure-ml-service-page]\n* 애저에서 머신러닝을 한다는 것은 무엇일까요? ➡️ [한석진님이 쓰신 기고를 살펴보세요][seokjin-azure-and-ml]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms-learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt-msdevkr]\n\n[ms-az-account-free]: https://azure.microsoft.com/ko-kr/free/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-azure-ml-service-page]: https://azure.microsoft.com/ko-kr/services/machine-learning/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-learn]: https://docs.microsoft.com/ko-kr/learn/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[yt-msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[fairlearn-website]: https://fairlearn.github.io\n[fairlearn-github]: https://github.com/fairlearn/fairlearn\n[fairlearn-pypi]: https://pypi.org/project/fairlearn/\n[openml-adult-census-1590]: https://www.openml.org/d/1590\n[scikit-learn-fetch_openml]: https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_openml.html\n[scikit-learn-tree]: https://scikit-learn.org/stable/modules/tree.html\n[scikit-learn-model-evaluation]: https://scikit-learn.org/stable/modules/model_evaluation.html\n[yt-mlops-101-seokjin]: https://www.youtube.com/playlist?list=PLDZRZwFT9Wku509LgbJviEcHxX4AYj3QP\n[azureml-sdk-pypi]: https://pypi.org/project/azureml-sdk/\n[fairlearn-metrics-package]: https://fairlearn.github.io/v0.5.0/api_reference/fairlearn.metrics.html\n[towardsdatascience-tutorial-fairness]: https://towardsdatascience.com/a-tutorial-on-fairness-in-machine-learning-3ff8ba1040cb\n[seokjin-azure-and-ml]: http://it.chosun.com/site/data/html_dir/2020/08/02/2020080200103.html\n[linkedin-soeun-park]: https://www.linkedin.com/in/soeun-park-b55613176/\n[linkedin-seokjin-han]: https://www.linkedin.com/in/seokjinhan/\n\n[ms-ai-approach]: https://www.microsoft.com/ko-kr/ai/our-approach?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-build-korea-2020-azure-track]: https://info.microsoft.com/AP-AzureINFRA-WBNR-FY21-07Jul-23-BuildKorea-SRDEM31279_LP02OnDemandRegistration-ForminBody.html?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-docs-ml-algorithm-evaluation-model-metrics]: https://docs.microsoft.com/en-us/azure/machine-learning/algorithm-module-reference/evaluate-model#metrics?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-learn-azure-ml-workspace]: https://docs.microsoft.com/ko-kr/learn/modules/intro-to-azure-machine-learning-service/2-azure-ml-workspace?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-azureml-core-experiment-class]: https://docs.microsoft.com/ko-kr/python/api/azureml-core/azureml.core.experiment(class)?view=azure-ml-py&ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-tc-fairlearn]: https://techcommunity.microsoft.com/t5/educator-developer-blog/fairlearn-a-python-package-to-assess-ai-system-s-fairness/ba-p/1402950?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-docs-responsible-ml]: https://docs.microsoft.com/en-us/azure/machine-learning/concept-responsible-ml?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-research-fairlearn]: https://www.microsoft.com/en-us/research/publication/fairlearn-a-toolkit-for-assessing-and-improving-fairness-in-ai/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-azure-ml-jupyter]: https://docs.microsoft.com/ko-kr/azure/machine-learning/how-to-run-jupyter-notebooks/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n[ms-azure-ml-docs]: https://docs.microsoft.com/ko-kr/azure/machine-learning/?ocid=AID3027813&WT.mc_id=aiml-13440-yechoi\n"},"e0dc618c-8d19-43ba-a613-f4b7c7c295df":{"id":"e0dc618c-8d19-43ba-a613-f4b7c7c295df","index":"Blog","path":"/posts/2021/01/06/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli/","node":{"title":"애저 CLI를 이용해 애저 이벤트그리드 구독 및 로직앱 이벤트 핸들러 프로비저닝하기","category":"Azure","description":"애저 이벤트그리드 커스텀 토픽에 대한 애저 이벤트그리드 구독 리소스는 ARM 템플릿을 통해 프로비저닝 할 수 없습니다. 이 포스트는 애저 CLI를 이용해서 이 애저 이벤트그리드 구독과 로직앱 이벤트 핸들러를 별다른 외부 입력값 없이 자동으로 프로비저닝하는 방법에 대해 알아봅니다.","content":"\n[애저 이벤트그리드][az evtgrd]라는 서비스를 이용하면 다양한 형태의 이벤트 기반 아키텍처를 구성할 수 있습니다. 특히 다양한 형태로 기존에 존재하는 애플리케이션간 이벤트 메시지를 전송하는데 있어서 꽤 유용하게 쓰이지요.\n\n![애저 이벤트그리드][image-01]\n\n\n## 이벤트 기반 아키텍처의 세 요소 ##\n\n이벤트 기반 아키텍처를 구성할 때 중요한 역할을 하는 세 가지 요소는 아래와 같습니다.\n\n\n### 이벤트 생성자/퍼블리셔 ###\n\n이벤트 생성자/퍼블리셔는 이벤트가 발생하는 근원입니다. 이벤트만 발생시킬 수 있다면 무엇이든 이벤트 생성자가 될 수 있죠. 아래 그림은 지난 2018년 [오픈 인프라 데이즈][oid]에서 발표했던 [클라우드이벤트 CloudEvents][oid ce] 발표 내용의 일부를 캡쳐한 것인데요, 아래 그림에서는 라즈베리파이 장치에서 이벤트를 생성하는 것에 대해 묘사합니다.\n\n![이벤트 생성자 Event Publisher][image-02]\n\n\n### 이벤트 구독자/섭스크라이버/처리자/핸들러 ###\n\n이벤트 구독자와 처리자는 엄밀히 말하면 다른 것이긴 하지만, 보통은 구독하면서 동시에 해당 이벤트를 처리하기 때문에 같은 것드로 봐도 큰 무리는 없습니다. 아래 그림에서는 이벤트 생성자가 보낸 이벤트를 받아 시각화 처리를 하는 형태를 보여줍니다.\n\n![이벤트 구독자 Event Subscriber][image-03]\n\n\n### 이벤트 중개자/브로커 ###\n\n일반적으로 이 이벤트 생성자와 구독자 사이에서는 직접적인 연결을 하지 않고 비동기식으로 진행하는데, 이 때 필요한 것이 바로 [애저 이벤트그리드][az evtgrd]와 같은 이벤트 중개자입니다. 아래 그림은 바로 [애저 이벤트그리드][az evtgrd]가 이벤트 생성자와 구독자 사이에서 어떤 역할을 하는지 보여줍니다.\n\n![이벤트 중개자 Event Broker][image-04]\n\n> [클라우드이벤트][ce]에 대해 좀 더 알고 싶다면, [발표 영상][oid yt]과 [발표 자료][oid ss]를 확인해 보세요!\n\n\n## 애저 이벤트그리드 구독자 생성하기 ##\n\n일반적인 CI/CD 환경에서 애저 이벤트그리드 토픽을 생성할 때에는 [ARM 템플릿][az evtgrd arm topic]을 이용하면 쉽습니다. 하지만, 이벤트그리드 구독을 생성하는 [ARM 템플릿][az evtgrd arm sub]은 내가 생성한 이벤트그리드 토픽을 지정할 수 없기 때문에 여기서는 안타깝지만 사용할 수 없습니다. 대신, [애저 CLI][az cli]를 사용해서 내가 지정한 토픽에 대해 구독을 생성하면 됩니다.\n\n---\n\n***추가:***\n\n정확하게는 이벤트그리드 구독 리소스를 생성하면서 토픽을 지정할 수 있는 방법이 사실 두 가지가 있습니다.\n\n### 스코프 지정하기 (권장하는 방법) ###\n\n위에 언급한 이벤트그리드 구독용 [ARM 템플릿][az evtgrd arm sub]을 사용하기 위해서는 `scope` 속성값을 지정해 주면 됩니다 (line #7). ARM 템플릿을 [bicep][az bicep]으로 구현한 샘플 코드는 대략 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=06-az-eventgrid-event-subscription-create-1.bicep&highlights=7\n\n\n### 하위 리소스 타입 지정하기 (권장하지는 않지만 허용되는 방법) ###\n\n또는 아래와 같이 하위 리소스 타입으로 구현을 할 수도 있습니다. 이 떄는 `scope` 속성값이 필요하진 않지만, 리소스 타입과 이름을 좀 더 길게 정해줘야 하는 번거로움이 있습니다 (line #6-7).\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=07-az-eventgrid-event-subscription-create-2.bicep&highlights=6-7\n\n따라서, 위와 같은 방식으로 애저 이벤트그리드 구독 리소스를 프로비저닝해도 됩니다. 다만, 이 포스트는 애저 CLI에 초점을 맞추도록 하겠습니다.\n\n---\n\n\n## 애저 CLI 사전 준비사항 ##\n\n[애저 CLI][az cli]로 이벤트그리드 구독 리소스를 프로비저닝하기 위해서는 아래 [확장기능][az cli extensions]을 먼저 설치해야 합니다. 여기서 [Logic][az cli extensions logic]은 [애저 로직앱][az logapp]을 위한 것인데, 이 포스트에서는 이벤트 처리자로서 로직앱을 사용하기 때문입니다.\n\n* [EventGrid][az cli extensions eventgrid]\n* [Logic][az cli extensions logic]\n\n> 이 두 확장기능은 이 글을 쓰는 현재 프리뷰 기능이며 언제든 구현이 바뀔 수 있다는 점 잊지 마세요!\n\n\n## 애저 CLI 명령어 ##\n\n먼저 [애저 로직앱][az logapp]을 이벤트 처리자로 사용하기 위해서는 로직앱의 엔드포인트 URL을 알아내야 합니다. 로직앱은 특성상 엔드포인트 뒤에 항상 SAS 토큰이 붙어오기 때문에 이를 함께 알아내야 합니다. 먼저 엔드포인트를 찾고자 하는 로직앱의 리소스 ID를 아래와 같이 `az logic workflow show` 명령어를 통해 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=01-az-logic-workflow-show.sh\n\n그 다음에는 `az rest` 명령어를 통해 SAS 토큰이 붙어 있는 엔드포인트 값을 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=02-az-rest.sh\n\n이제 로직앱을 이벤트 처리자로 사용하기 위한 준비는 끝났습니다. 다음 순서는 이벤트그리드 토픽의 리소스 ID를 아래와 같이 `az eventgrid topic show` 명령어를 통해 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=03-az-eventgrid-topic-show.sh\n\n이벤트그리드 구독자를 생성하기 위한 모든 준비가 끝났습니다. 아래 `az eventgrid event-subscription create` 명령어를 통해 이벤트그리드 구독자를 생성합니다. 여기서는 [CNCF][cncf]의 인큐베이팅 프로젝트인 [CloudEvents 스키마][ce]를 사용하는 것으로 합니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=04-az-eventgrid-event-subscription-create.sh\n\n위와 같은 방법으로 하면 곧바로 애저 이벤트그리드 구독자 리소스를 프로비저닝할 수 있습니다. 위 명령어를 한줄로 합치면 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=05-one-liner.sh\n\n---\n\n지금까지 이벤트그리드 구독자를 프로비저닝하고 로직앱을 그 처리자로 설정하기 위해 애저 CLI를 이용하는 방법에 대해 알아 보았습니다. 이를 조금 더 활용하면 [깃헙 액션][gh actions]과 같은 CI/CD 파이프라인에서도 손쉽게 통합시킬 수 있을 것입니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://docs.microsoft.com/ko-kr/azure/event-grid/media/overview/functional-model.png?WT.mc_id=devops-12244-juyoo\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-04.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=devops-12244-juyoo\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=devops-12244-juyoo\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az cli]: https://docs.microsoft.com/ko-kr/cli/azure/what-is-azure-cli?WT.mc_id=devops-12244-juyoo\n[az cli extensions]: https://docs.microsoft.com/ko-kr/cli/azure/azure-cli-extensions-list?WT.mc_id=devops-12244-juyoo\n[az cli extensions eventgrid]: https://github.com/Azure/azure-cli-extensions/tree/master/src/eventgrid\n[az cli extensions logic]: https://github.com/Azure/azure-cli-extensions/tree/master/src/logic\n\n[az bicep]: https://github.com/Azure/bicep\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=devops-12244-juyoo\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=devops-12244-juyoo\n[az evtgrd arm topic]: https://docs.microsoft.com/ko-kr/azure/templates/microsoft.eventgrid/topics?WT.mc_id=devops-12244-juyoo\n[az evtgrd arm sub]: https://docs.microsoft.com/ko-kr/azure/templates/microsoft.eventgrid/eventsubscriptions?WT.mc_id=devops-12244-juyoo\n\n[oid]: https://event.openinfradays.kr/2018/about/\n[oid ce]: https://event.openinfradays.kr/2018/session1/track_4_0\n[oid yt]: https://youtu.be/h2_ZNTXwlVc\n[oid ss]: https://www.slideshare.net/openstack_kr/openinfra-days-korea-2018-track-4-cloudevents\n\n[cncf]: https://www.cncf.io/\n[ce]: https://cloudevents.io/\n\n[gh actions]: https://docs.github.com/en/free-pro-team@latest/actions\n"},"title":"애저 CLI를 이용해 애저 이벤트그리드 구독 및 로직앱 이벤트 핸들러 프로비저닝하기","content":"\n[애저 이벤트그리드][az evtgrd]라는 서비스를 이용하면 다양한 형태의 이벤트 기반 아키텍처를 구성할 수 있습니다. 특히 다양한 형태로 기존에 존재하는 애플리케이션간 이벤트 메시지를 전송하는데 있어서 꽤 유용하게 쓰이지요.\n\n![애저 이벤트그리드][image-01]\n\n\n## 이벤트 기반 아키텍처의 세 요소 ##\n\n이벤트 기반 아키텍처를 구성할 때 중요한 역할을 하는 세 가지 요소는 아래와 같습니다.\n\n\n### 이벤트 생성자/퍼블리셔 ###\n\n이벤트 생성자/퍼블리셔는 이벤트가 발생하는 근원입니다. 이벤트만 발생시킬 수 있다면 무엇이든 이벤트 생성자가 될 수 있죠. 아래 그림은 지난 2018년 [오픈 인프라 데이즈][oid]에서 발표했던 [클라우드이벤트 CloudEvents][oid ce] 발표 내용의 일부를 캡쳐한 것인데요, 아래 그림에서는 라즈베리파이 장치에서 이벤트를 생성하는 것에 대해 묘사합니다.\n\n![이벤트 생성자 Event Publisher][image-02]\n\n\n### 이벤트 구독자/섭스크라이버/처리자/핸들러 ###\n\n이벤트 구독자와 처리자는 엄밀히 말하면 다른 것이긴 하지만, 보통은 구독하면서 동시에 해당 이벤트를 처리하기 때문에 같은 것드로 봐도 큰 무리는 없습니다. 아래 그림에서는 이벤트 생성자가 보낸 이벤트를 받아 시각화 처리를 하는 형태를 보여줍니다.\n\n![이벤트 구독자 Event Subscriber][image-03]\n\n\n### 이벤트 중개자/브로커 ###\n\n일반적으로 이 이벤트 생성자와 구독자 사이에서는 직접적인 연결을 하지 않고 비동기식으로 진행하는데, 이 때 필요한 것이 바로 [애저 이벤트그리드][az evtgrd]와 같은 이벤트 중개자입니다. 아래 그림은 바로 [애저 이벤트그리드][az evtgrd]가 이벤트 생성자와 구독자 사이에서 어떤 역할을 하는지 보여줍니다.\n\n![이벤트 중개자 Event Broker][image-04]\n\n> [클라우드이벤트][ce]에 대해 좀 더 알고 싶다면, [발표 영상][oid yt]과 [발표 자료][oid ss]를 확인해 보세요!\n\n\n## 애저 이벤트그리드 구독자 생성하기 ##\n\n일반적인 CI/CD 환경에서 애저 이벤트그리드 토픽을 생성할 때에는 [ARM 템플릿][az evtgrd arm topic]을 이용하면 쉽습니다. 하지만, 이벤트그리드 구독을 생성하는 [ARM 템플릿][az evtgrd arm sub]은 내가 생성한 이벤트그리드 토픽을 지정할 수 없기 때문에 여기서는 안타깝지만 사용할 수 없습니다. 대신, [애저 CLI][az cli]를 사용해서 내가 지정한 토픽에 대해 구독을 생성하면 됩니다.\n\n---\n\n***추가:***\n\n정확하게는 이벤트그리드 구독 리소스를 생성하면서 토픽을 지정할 수 있는 방법이 사실 두 가지가 있습니다.\n\n### 스코프 지정하기 (권장하는 방법) ###\n\n위에 언급한 이벤트그리드 구독용 [ARM 템플릿][az evtgrd arm sub]을 사용하기 위해서는 `scope` 속성값을 지정해 주면 됩니다 (line #7). ARM 템플릿을 [bicep][az bicep]으로 구현한 샘플 코드는 대략 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=06-az-eventgrid-event-subscription-create-1.bicep&highlights=7\n\n\n### 하위 리소스 타입 지정하기 (권장하지는 않지만 허용되는 방법) ###\n\n또는 아래와 같이 하위 리소스 타입으로 구현을 할 수도 있습니다. 이 떄는 `scope` 속성값이 필요하진 않지만, 리소스 타입과 이름을 좀 더 길게 정해줘야 하는 번거로움이 있습니다 (line #6-7).\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=07-az-eventgrid-event-subscription-create-2.bicep&highlights=6-7\n\n따라서, 위와 같은 방식으로 애저 이벤트그리드 구독 리소스를 프로비저닝해도 됩니다. 다만, 이 포스트는 애저 CLI에 초점을 맞추도록 하겠습니다.\n\n---\n\n\n## 애저 CLI 사전 준비사항 ##\n\n[애저 CLI][az cli]로 이벤트그리드 구독 리소스를 프로비저닝하기 위해서는 아래 [확장기능][az cli extensions]을 먼저 설치해야 합니다. 여기서 [Logic][az cli extensions logic]은 [애저 로직앱][az logapp]을 위한 것인데, 이 포스트에서는 이벤트 처리자로서 로직앱을 사용하기 때문입니다.\n\n* [EventGrid][az cli extensions eventgrid]\n* [Logic][az cli extensions logic]\n\n> 이 두 확장기능은 이 글을 쓰는 현재 프리뷰 기능이며 언제든 구현이 바뀔 수 있다는 점 잊지 마세요!\n\n\n## 애저 CLI 명령어 ##\n\n먼저 [애저 로직앱][az logapp]을 이벤트 처리자로 사용하기 위해서는 로직앱의 엔드포인트 URL을 알아내야 합니다. 로직앱은 특성상 엔드포인트 뒤에 항상 SAS 토큰이 붙어오기 때문에 이를 함께 알아내야 합니다. 먼저 엔드포인트를 찾고자 하는 로직앱의 리소스 ID를 아래와 같이 `az logic workflow show` 명령어를 통해 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=01-az-logic-workflow-show.sh\n\n그 다음에는 `az rest` 명령어를 통해 SAS 토큰이 붙어 있는 엔드포인트 값을 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=02-az-rest.sh\n\n이제 로직앱을 이벤트 처리자로 사용하기 위한 준비는 끝났습니다. 다음 순서는 이벤트그리드 토픽의 리소스 ID를 아래와 같이 `az eventgrid topic show` 명령어를 통해 알아냅니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=03-az-eventgrid-topic-show.sh\n\n이벤트그리드 구독자를 생성하기 위한 모든 준비가 끝났습니다. 아래 `az eventgrid event-subscription create` 명령어를 통해 이벤트그리드 구독자를 생성합니다. 여기서는 [CNCF][cncf]의 인큐베이팅 프로젝트인 [CloudEvents 스키마][ce]를 사용하는 것으로 합니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=04-az-eventgrid-event-subscription-create.sh\n\n위와 같은 방법으로 하면 곧바로 애저 이벤트그리드 구독자 리소스를 프로비저닝할 수 있습니다. 위 명령어를 한줄로 합치면 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/8865213b31baeda9f7c1ad258351a039?file=05-one-liner.sh\n\n---\n\n지금까지 이벤트그리드 구독자를 프로비저닝하고 로직앱을 그 처리자로 설정하기 위해 애저 CLI를 이용하는 방법에 대해 알아 보았습니다. 이를 조금 더 활용하면 [깃헙 액션][gh actions]과 같은 CI/CD 파이프라인에서도 손쉽게 통합시킬 수 있을 것입니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[image-01]: https://docs.microsoft.com/ko-kr/azure/event-grid/media/overview/functional-model.png?WT.mc_id=devops-12244-juyoo\n[image-02]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-02.png\n[image-03]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-03.png\n[image-04]: https://sa0blogs.blob.core.windows.net/aliencube/2021/01/provisioning-eventgrid-subscription-and-logicapp-handler-using-azure-cli-04.png\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=devops-12244-juyoo\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=devops-12244-juyoo\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az cli]: https://docs.microsoft.com/ko-kr/cli/azure/what-is-azure-cli?WT.mc_id=devops-12244-juyoo\n[az cli extensions]: https://docs.microsoft.com/ko-kr/cli/azure/azure-cli-extensions-list?WT.mc_id=devops-12244-juyoo\n[az cli extensions eventgrid]: https://github.com/Azure/azure-cli-extensions/tree/master/src/eventgrid\n[az cli extensions logic]: https://github.com/Azure/azure-cli-extensions/tree/master/src/logic\n\n[az bicep]: https://github.com/Azure/bicep\n\n[az logapp]: https://docs.microsoft.com/ko-kr/azure/logic-apps/logic-apps-overview?WT.mc_id=devops-12244-juyoo\n\n[az evtgrd]: https://docs.microsoft.com/ko-kr/azure/event-grid/overview?WT.mc_id=devops-12244-juyoo\n[az evtgrd arm topic]: https://docs.microsoft.com/ko-kr/azure/templates/microsoft.eventgrid/topics?WT.mc_id=devops-12244-juyoo\n[az evtgrd arm sub]: https://docs.microsoft.com/ko-kr/azure/templates/microsoft.eventgrid/eventsubscriptions?WT.mc_id=devops-12244-juyoo\n\n[oid]: https://event.openinfradays.kr/2018/about/\n[oid ce]: https://event.openinfradays.kr/2018/session1/track_4_0\n[oid yt]: https://youtu.be/h2_ZNTXwlVc\n[oid ss]: https://www.slideshare.net/openstack_kr/openinfra-days-korea-2018-track-4-cloudevents\n\n[cncf]: https://www.cncf.io/\n[ce]: https://cloudevents.io/\n\n[gh actions]: https://docs.github.com/en/free-pro-team@latest/actions\n"},"989c24f3-a87c-4409-920b-4ac7320e3459":{"id":"989c24f3-a87c-4409-920b-4ac7320e3459","index":"Blog","path":"/posts/2021/01/12/6-ways-refactoring-azure-devops-pipelines/","node":{"title":"애저 DevOps 파이프라인을 리팩토링하는 6가지 방법","category":"Azure","description":"애저 DevOps 파이프라인 YAML 파일을 사용하다 보면 반복적인 작업이 많이 나옵니다. 이 반복적인 작업 부분을 템플릿 형태로 리팩토링할 수 있는 포인트가 최소 여섯 군데 정도인데, 이러한 리팩토링 테크닉에 대해 다뤄봅니다.","content":"\n\n[애저 DevOps][az devops]에서 [CI/CD 파이프라인][az devops pipelines]을 구성하다보면 보통 반복적인 작업들이 많습니다. 이게 [태스크 Tasks][az devops pipelines tasks] 수준일 수도 있고, [작업 Jobs][az devops pipelines jobs] 수준일 수도 있고, [스테이지 Stages][az devops pipelines stages] 수준일 수도 있는데, 코딩을 할 때는 반복적인 부분을 리팩토링 한다지만, 파이프라인에서 반복적인 부분을 리팩토링할 수는 없을까요? 물론 있습니다. 그것도 파이프라인을 리팩토링할 수 있는 포인트가 최소 여섯 군데 정도 있습니다. 이 포스트에서는 애저 파이프라인의 [YAML][az devops pipelines yaml] 형식 [템플릿][az devops pipelines templates]을 이용해서 반복적으로 나타나는 부분을 리팩토링하는 방법에 대해 알아보겠습니다.\n\n> 이 포스트에 쓰인 예제 파이프라인 코드를 [이 리포지토리](https://github.com/devkimchi/Azure-Pipelines-Template-Sample)에서 확인해 보세요!\n\n\n## 빌드 파이프라인 ##\n\n우선 일반적인 빌드 파이프라인을 한 번 만들어 보겠습니다. 아래는 그냥 빌드 `Stage`를 작성한 것입니다. `Stages/Stage` 아래 `Jobs/Job` 아래 `Steps/Task`가 들어가 있습니다. `Greeting` 이라는 변수값을 출력시키는 파이프라인입니다 (line #18, 25)\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-without-template.yaml&highlights=18,25\n\n이 파이프라인을 실행시키면 아래와 같은 결과가 나옵니다. `Hello World`가 보이죠?\n\n![리팩토링 전 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-01.png)\n\n이제 이 빌드 파이프라인을 리팩토링할 차례입니다. 리팩토링은 크게 세 곳에서 가능한데요, 하나는 `Steps` 수준, 다른 하나는 `Jobs` 수준, 그리고 마지막 하나는 `Stages` 수준입니다.\n\n\n## 빌드 파이프라인을 `Steps` 수준에서 리팩토링하기 ##\n\n예를 들어 node.js 기반의 애플리케이션을 하나 만든다고 가정해 보죠. 이 경우 보통 순서가\n\n1. node.js 런타임 설치하기\n2. npm 패키지 복원하기\n3. 애플리케이션 빌드하기\n4. 애플리케이션 테스트하기\n5. 아티팩트 생성하기\n\n정도가 될 것입니다. 이 때 마지막 5번 항목을 제외하고는 거의 대부분의 경우 같은 순서로, 그리고 저 1-4번 작업을 한 세트로 해서 진행을 하게 되죠. 그렇다면 이 1-4번 작업 흐름을 그냥 하나로 묶어서 템플릿 형태로 빼 놓을 수도 있지 않을까요? 이럴 때 바로 `Steps` 수준의 리팩토링을 진행하게 됩니다. 만약 다른 작업에서는 이후 추가 작업을 더 필요로 한다고 하면 템플릿을 돌리고 난 후 추가 태스크를 정의하면 되므로 별 문제는 없습니다.\n\n이제 위에 정의한 빌드 파이프라인의 `Steps` 부분을 별도의 템플릿으로 분리합니다. 그렇다면 원래 파이프라인과 템플릿은 아래와 같이 바뀔 것입니다. 원래 파이프라인(`pipeline.yaml`)의 `steps` 항목 아래에 `template` 라는 항목이 생기고 (line #21), `parameters`를 통해 템플릿으로 값을 전달하는 것이 보일 것입니다 (line #22-23).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-steps-template.yaml&highlights=21-23\n\n그리고 `Steps` 수준 리팩토링 결과 템플릿인 `template-steps-build.yaml`을 보면, 아래와 같이 `parameters`와 `steps`를 정의했습니다 (line #2, 5). 이 `parameters` 항목을 통해 부모 파이프라인과 템플릿 사이 값을 교환할 수 있게 해 줍니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-steps-build.yaml&highlights=2,5\n\n이렇게 리팩토링을 한 후 파이프라인을 돌려보면 아래와 같은 결과 화면을 보게 됩니다. 부모 파이프라인에서 템플릿으로 넘겨준 파라미터 값이 잘 표현되는 것이 보이죠?\n\n![Steps 수준 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-02.png)\n\n\n## 빌드 파이프라인을 `Jobs` 수준에서 리팩토링하기 ##\n\n이번에는 `Jobs` 수준에서 리팩토링을 한 번 해보겠습니다. 앞서 연습해 봤던 `Steps` 수준 리팩토링은 공통의 태스크들을 묶어주는 정도였다면, `Jobs` 수준의 리팩토링은 그보다 큰 덩어리를 다룹니다. 이 덩어리에는 [빌드 에이전트][az devops pipelines agents]의 종류까지 결정할 수 있고, 템플릿 안의 모든 태스크를 동일하게 가져갈 수 있습니다.\n\n> 물론 [조건 표현식][az devops pipelines conditions]과 같은 고급 기능을 사용하면 좀 더 다양한 시나리오에서 다양한 태스크들을 활용할 수 있습니다.\n\n아래와 같이 부모 파이프라인을 수정해 보죠 (line #13-16).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-jobs-template.yaml&highlights=13-16\n\n그리고 난 후, 아래와 같이 `template-jobs-build.yaml` 파일을 작성합니다. 파라미터로 `vmImage`와 `message`를 넘겨 템플릿에서 어떻게 사용하는지 살펴보죠 (line #2-4).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-build.yaml&highlights=2-4\n\n`Jobs` 수준에서 사용하는 빌드 에이전트의 종류까지도 변수화시켜 사용할 수 있는 것이 보이나요? 부모 템플릿에서 에이전트를 `Windows Server 2016` 버전으로 설정했으므로 실제 이를 파이프라인으로 돌려보면 아래와 같은 결과가 나타납니다.\n\n![Jobs 수준 리팩토링후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-03.png)\n\n\n## 빌드 파이프라인을 `Stages` 수준에서 리팩토링하기 ##\n\n이번에는 `Stages` 수준에서 파이프라인 리팩토링을 시도해 보겠습니다. 하나의 스테이지에는 여러개의 `Job`을 동시에 돌리거나 순차적으로 돌릴 수 있습니다. `Job` 수준에서 돌아가는 공통의 작업들이 있다면 이를 `Job` 수준에서 묶어 리팩토링 할 수 있겠지만, 아예 공통의 `Job`들 까지 묶어서 하나의 `Stage`를 만들고 이를 별도의 템플릿으로 빼낼 수 있는데, 이것이 이 연습의 핵심입니다. 아래 부모 파이프라인 코드를 보세요. `stages` 아래에 곧바로 템플릿을 지정하고 변수를 보냅니다 (line #9-12).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-stages-template.yaml&highlights=9-12\n\n위에서 언급한 `template-stage-build.yaml` 파일은 아래와 같이 작성할 수 있습니다. 부모에서 받아온 파라미터를 통해 빌드 에이전트에 쓰일 OS와 다른 값들을 설정할 수 있는게 보이죠 (line #2-4)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-build.yaml&highlights=2-4\n\n이렇게 해서 파이프라인을 실행해 본 결과는 대략 아래와 같습니다. 변수를 통해 전달한 값에 따라 빌드 에이전트가 `Ubuntu 16.04` 버전으로 설정이 되었고, 글로벌 변수 값을 별도로 재정의하지 않았으므로 아래 그림과 같이 `G'day, mate`라는 글로벌 변수 값을 볼 수 있습니다.\n\n![Stages 수준 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-04.png)\n\n\n## 빌드 파이프라인을 다단계 템플릿으로 리팩토링하기 ##\n\n이렇게 `Steps` 수준, `Jobs` 수준, `Stages` 수준에서 모두 리팩토링을 해 봤습니다. 그렇다면 리팩토링의 결과물인 템플릿을 다단계로 걸쳐서 사용할 수는 없을까요? 물론 당연히 되죠. 아래와 같이 부모 파이프라인을 수정해 보겠습니다. 이번에는 맥OS를 에이전트로 선택해 볼까요 (line #9-12)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-nested-stages-template.yaml&highlights=9-12\n\n`Stage` 수준에서 다단계 템플릿을 만들어서 붙여봤습니다. 이 템플릿 안에서 또다시 `Jobs` 수준의 다단계 템플릿을 호출합니다 (line #11-14).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-nested-build.yaml&highlights=11-14\n\n`Jobs` 수준의 다단계 템플릿은 대략 아래와 같습니다. 그리고, 이 안에서 또다시 앞서 만들어 둔 `Steps` 수준의 템플릿을 호출합니다 (line #17-19).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-nested-build.yaml&highlights=17-19\n\n이렇게 다단계로 템플릿을 만들어 붙여놓은 후 파이프라인을 돌려보면 아래와 같습니다.\n\n![다단계 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-05.png)\n\n아주 문제 없이 다단계 템플릿이 잘 돌아가는게 보이죠?\n\n지금까지 빌드 파이프라인을 리팩토링해 봤습니다. 이제 릴리즈 파이프라인으로 들어가 보겠습니다.\n\n\n## 릴리즈 파이프라인 ##\n\n릴리즈 파이프라인은 빌드 파이프라인과 크게 다르지 않습니다. 다만 `job` 대신 [`deployment job`][az devpos pipelines deploymentjobs]을 사용한다는 차이가 있을 뿐입니다. 이 둘의 차이에 대해 얘기하는 것은 이 포스트의 범위를 벗어나니 여기까지만 하기로 하고, 실제 릴리즈 파이프라인의 구성을 보겠습니다. 템플릿 리팩토링 없는 전형적인 릴리즈 스테이지는 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-without-template.yaml&highlights=9\n\n위 코드를 보면 `Jobs` 수준에 `deployment`를 사용해서 작업 단위를 정의한 것을 볼 수 있죠 (line #9)? 이를 실행시킨 결과는 대략 아래와 같습니다.\n\n![리팩토링 전 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-06.png)\n\n이제 이 릴리즈 파이프라인을 동일하게 세 곳, `Steps`, `Jobs`, `Stages` 수준에서 리팩토링을 할 수 있습니다. 각각의 리팩토링 방식은 크게 다르지 않으므로 아래 리팩토링 결과만을 적어놓도록 하겠습니다.\n\n\n## 릴리즈 파이프라인을 `Steps` 수준에서 리팩토링하기 ##\n\n우선 `Steps` 수준에서 릴리즈 템플릿을 만들어 보도록 하죠. 부모 템플릿은 아래와 같습니다 (line #24-26).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-steps-template.yaml&highlights=24-26\n\n그리고 템플릿으로 빼낸 `Steps`는 아래와 같습니다. 앞서 빌드 파이프라인에서 사용한 템플릿과 구조가 다르지 않죠 (line #2-3)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-steps-release.yaml&highlights=2-3\n\n그리고 그 결과를 보면 아래와 같습니다.\n\n![Steps 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-07.png)\n\n\n## 릴리즈 파이프라인을 `Jobs` 수준에서 리팩토링하기 ##\n\n이번에는 릴리즈 파이프라인을 `Jobs` 수준에서 리팩토링해 보겠습니다 (line #13-17).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-jobs-template.yaml&highlights=13-17\n\n그리고 리팩토링한 템플릿은 아래와 같습니다. 여기서 눈여겨 봐야 할 부분은 바로 [`environment`][az devops pipelines environments] 이름도 파라미터로 처리가 가능하다는 점입니다 (line #14). 즉, 거의 대부분의 설정을 부모 파이프라인에서 파라미터로 내려주면 템플릿에서 받아 처리가 가능합니다 (line #2-5).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-release.yaml&highlights=2-5,14\n\n![Jobs 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-08.png)\n\n\n## 릴리즈 파이프라인을 `Stages` 수준에서 리팩토링하기 ##\n\n더 이상의 자세한 설명은 생략합니다 (line #5-9). 😉\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-stages-template.yaml&highlights=5-9\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=tmplate-stages-release.yaml&highlights=2-5\n\n![Stages 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-09.png)\n\n\n## 릴리즈 파이프라인을 다단계 템플릿으로 리팩토링하기 ##\n\n릴리즈 파이프라인 역시 다단계 템플릿으로 구성이 가능합니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-nested-stages-template.yaml&highlights=5-9\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-nested-release.yaml&highlights=2-5,12-16\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-nested-release.yaml&highlights=20-22\n\n![다단계 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-10.png)\n\n---\n\n이렇게 빌드 및 릴리즈 파이프라인을 모든 [`Stages`][az devops pipelines stages], [`Jobs`][az devops pipelines jobs], [`Steps`][az devops pipelines tasks] 수준에서 [템플릿][az devops pipelines templates]을 이용해 리팩토링을 해 보았습니다. 파이프라인 작업을 하다 보면 분명히 리팩토링이 필요한 순간이 생깁니다. 그리고 어느 수준에서 템플릿을 만들어 써야 할 지는 전적으로 상황마다 다르다고 할 수 있습니다.\n\n다만 한 가지 고려해야 할 것은, 템플릿은 가급적이면 단순한 작업을 할 수 있게끔 만드는 것이 좋습니다. 템플릿 표현식을 보면 조건문도 있고 반복문도 있고 굉장히 고급 기능을 사용할 수 있긴 하지만, 우선은 단순하게 시작해서 템플릿을 다듬어 나가는 것이 좋을 것입니다. 아무쪼록 [애저 데브옵스 파이프라인][az devops pipelines]의 [다중 스테이지 파이프라인 기법][az devops pipelines multi-stage]을 통해 다양한 템플릿 활용 테크닉을 도입해 보고 그 강력함을 느낄 수 있기를 바랍니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 DevOps에 관심이 있으신가요? ➡️ [무료 애저 DevOps 사용하기][az devops free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=devops-12575-juyoo\n[az devops free]: https://azure.microsoft.com/ko-kr/services/devops/?WT.mc_id=devops-12575-juyoo\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=devops-12575-juyoo\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az devops]: https://docs.microsoft.com/ko-kr/azure/devops/user-guide/what-is-azure-devops?view=azure-devops&WT.mc_id=devops-12575-juyoo\n[az devops pipelines]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops&WT.mc_id=devops-12575-juyoo\n[az devops pipelines tasks]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/tasks?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo\n[az devops pipelines jobs]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo\n[az devpos pipelines deploymentjobs]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/deployment-jobs?view=azure-devops&WT.mc_id=devops-12575-juyoo\n[az devops pipelines stages]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/stages?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo\n[az devops pipelines yaml]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema&WT.mc_id=devops-12575-juyoo\n[az devops pipelines templates]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/templates?view=azure-devops&WT.mc_id=devops-12575-juyoo\n[az devops pipelines conditions]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo\n[az devops pipelines agents]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/agents/agents?view=azure-devops&tabs=browser&WT.mc_id=devops-12575-juyoo\n[az devops pipelines multi-stage]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/get-started/multi-stage-pipelines-experience?view=azure-devops&WT.mc_id=devops-12575-juyoo\n[az devops pipelines environments]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/environments?view=azure-devops&WT.mc_id=devops-12575-juyoo\n"},"title":"애저 DevOps 파이프라인을 리팩토링하는 6가지 방법","content":"\n\n[애저 DevOps][az devops]에서 [CI/CD 파이프라인][az devops pipelines]을 구성하다보면 보통 반복적인 작업들이 많습니다. 이게 [태스크 Tasks][az devops pipelines tasks] 수준일 수도 있고, [작업 Jobs][az devops pipelines jobs] 수준일 수도 있고, [스테이지 Stages][az devops pipelines stages] 수준일 수도 있는데, 코딩을 할 때는 반복적인 부분을 리팩토링 한다지만, 파이프라인에서 반복적인 부분을 리팩토링할 수는 없을까요? 물론 있습니다. 그것도 파이프라인을 리팩토링할 수 있는 포인트가 최소 여섯 군데 정도 있습니다. 이 포스트에서는 애저 파이프라인의 [YAML][az devops pipelines yaml] 형식 [템플릿][az devops pipelines templates]을 이용해서 반복적으로 나타나는 부분을 리팩토링하는 방법에 대해 알아보겠습니다.\n\n> 이 포스트에 쓰인 예제 파이프라인 코드를 [이 리포지토리](https://github.com/devkimchi/Azure-Pipelines-Template-Sample)에서 확인해 보세요!\n\n\n## 빌드 파이프라인 ##\n\n우선 일반적인 빌드 파이프라인을 한 번 만들어 보겠습니다. 아래는 그냥 빌드 `Stage`를 작성한 것입니다. `Stages/Stage` 아래 `Jobs/Job` 아래 `Steps/Task`가 들어가 있습니다. `Greeting` 이라는 변수값을 출력시키는 파이프라인입니다 (line #18, 25)\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-without-template.yaml&highlights=18,25\n\n이 파이프라인을 실행시키면 아래와 같은 결과가 나옵니다. `Hello World`가 보이죠?\n\n![리팩토링 전 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-01.png)\n\n이제 이 빌드 파이프라인을 리팩토링할 차례입니다. 리팩토링은 크게 세 곳에서 가능한데요, 하나는 `Steps` 수준, 다른 하나는 `Jobs` 수준, 그리고 마지막 하나는 `Stages` 수준입니다.\n\n\n## 빌드 파이프라인을 `Steps` 수준에서 리팩토링하기 ##\n\n예를 들어 node.js 기반의 애플리케이션을 하나 만든다고 가정해 보죠. 이 경우 보통 순서가\n\n1. node.js 런타임 설치하기\n2. npm 패키지 복원하기\n3. 애플리케이션 빌드하기\n4. 애플리케이션 테스트하기\n5. 아티팩트 생성하기\n\n정도가 될 것입니다. 이 때 마지막 5번 항목을 제외하고는 거의 대부분의 경우 같은 순서로, 그리고 저 1-4번 작업을 한 세트로 해서 진행을 하게 되죠. 그렇다면 이 1-4번 작업 흐름을 그냥 하나로 묶어서 템플릿 형태로 빼 놓을 수도 있지 않을까요? 이럴 때 바로 `Steps` 수준의 리팩토링을 진행하게 됩니다. 만약 다른 작업에서는 이후 추가 작업을 더 필요로 한다고 하면 템플릿을 돌리고 난 후 추가 태스크를 정의하면 되므로 별 문제는 없습니다.\n\n이제 위에 정의한 빌드 파이프라인의 `Steps` 부분을 별도의 템플릿으로 분리합니다. 그렇다면 원래 파이프라인과 템플릿은 아래와 같이 바뀔 것입니다. 원래 파이프라인(`pipeline.yaml`)의 `steps` 항목 아래에 `template` 라는 항목이 생기고 (line #21), `parameters`를 통해 템플릿으로 값을 전달하는 것이 보일 것입니다 (line #22-23).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-steps-template.yaml&highlights=21-23\n\n그리고 `Steps` 수준 리팩토링 결과 템플릿인 `template-steps-build.yaml`을 보면, 아래와 같이 `parameters`와 `steps`를 정의했습니다 (line #2, 5). 이 `parameters` 항목을 통해 부모 파이프라인과 템플릿 사이 값을 교환할 수 있게 해 줍니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-steps-build.yaml&highlights=2,5\n\n이렇게 리팩토링을 한 후 파이프라인을 돌려보면 아래와 같은 결과 화면을 보게 됩니다. 부모 파이프라인에서 템플릿으로 넘겨준 파라미터 값이 잘 표현되는 것이 보이죠?\n\n![Steps 수준 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-02.png)\n\n\n## 빌드 파이프라인을 `Jobs` 수준에서 리팩토링하기 ##\n\n이번에는 `Jobs` 수준에서 리팩토링을 한 번 해보겠습니다. 앞서 연습해 봤던 `Steps` 수준 리팩토링은 공통의 태스크들을 묶어주는 정도였다면, `Jobs` 수준의 리팩토링은 그보다 큰 덩어리를 다룹니다. 이 덩어리에는 [빌드 에이전트][az devops pipelines agents]의 종류까지 결정할 수 있고, 템플릿 안의 모든 태스크를 동일하게 가져갈 수 있습니다.\n\n> 물론 [조건 표현식][az devops pipelines conditions]과 같은 고급 기능을 사용하면 좀 더 다양한 시나리오에서 다양한 태스크들을 활용할 수 있습니다.\n\n아래와 같이 부모 파이프라인을 수정해 보죠 (line #13-16).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-jobs-template.yaml&highlights=13-16\n\n그리고 난 후, 아래와 같이 `template-jobs-build.yaml` 파일을 작성합니다. 파라미터로 `vmImage`와 `message`를 넘겨 템플릿에서 어떻게 사용하는지 살펴보죠 (line #2-4).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-build.yaml&highlights=2-4\n\n`Jobs` 수준에서 사용하는 빌드 에이전트의 종류까지도 변수화시켜 사용할 수 있는 것이 보이나요? 부모 템플릿에서 에이전트를 `Windows Server 2016` 버전으로 설정했으므로 실제 이를 파이프라인으로 돌려보면 아래와 같은 결과가 나타납니다.\n\n![Jobs 수준 리팩토링후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-03.png)\n\n\n## 빌드 파이프라인을 `Stages` 수준에서 리팩토링하기 ##\n\n이번에는 `Stages` 수준에서 파이프라인 리팩토링을 시도해 보겠습니다. 하나의 스테이지에는 여러개의 `Job`을 동시에 돌리거나 순차적으로 돌릴 수 있습니다. `Job` 수준에서 돌아가는 공통의 작업들이 있다면 이를 `Job` 수준에서 묶어 리팩토링 할 수 있겠지만, 아예 공통의 `Job`들 까지 묶어서 하나의 `Stage`를 만들고 이를 별도의 템플릿으로 빼낼 수 있는데, 이것이 이 연습의 핵심입니다. 아래 부모 파이프라인 코드를 보세요. `stages` 아래에 곧바로 템플릿을 지정하고 변수를 보냅니다 (line #9-12).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-stages-template.yaml&highlights=9-12\n\n위에서 언급한 `template-stage-build.yaml` 파일은 아래와 같이 작성할 수 있습니다. 부모에서 받아온 파라미터를 통해 빌드 에이전트에 쓰일 OS와 다른 값들을 설정할 수 있는게 보이죠 (line #2-4)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-build.yaml&highlights=2-4\n\n이렇게 해서 파이프라인을 실행해 본 결과는 대략 아래와 같습니다. 변수를 통해 전달한 값에 따라 빌드 에이전트가 `Ubuntu 16.04` 버전으로 설정이 되었고, 글로벌 변수 값을 별도로 재정의하지 않았으므로 아래 그림과 같이 `G'day, mate`라는 글로벌 변수 값을 볼 수 있습니다.\n\n![Stages 수준 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-04.png)\n\n\n## 빌드 파이프라인을 다단계 템플릿으로 리팩토링하기 ##\n\n이렇게 `Steps` 수준, `Jobs` 수준, `Stages` 수준에서 모두 리팩토링을 해 봤습니다. 그렇다면 리팩토링의 결과물인 템플릿을 다단계로 걸쳐서 사용할 수는 없을까요? 물론 당연히 되죠. 아래와 같이 부모 파이프라인을 수정해 보겠습니다. 이번에는 맥OS를 에이전트로 선택해 볼까요 (line #9-12)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-build-with-nested-stages-template.yaml&highlights=9-12\n\n`Stage` 수준에서 다단계 템플릿을 만들어서 붙여봤습니다. 이 템플릿 안에서 또다시 `Jobs` 수준의 다단계 템플릿을 호출합니다 (line #11-14).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-nested-build.yaml&highlights=11-14\n\n`Jobs` 수준의 다단계 템플릿은 대략 아래와 같습니다. 그리고, 이 안에서 또다시 앞서 만들어 둔 `Steps` 수준의 템플릿을 호출합니다 (line #17-19).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-nested-build.yaml&highlights=17-19\n\n이렇게 다단계로 템플릿을 만들어 붙여놓은 후 파이프라인을 돌려보면 아래와 같습니다.\n\n![다단계 리팩토링 후 애저 빌드 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-05.png)\n\n아주 문제 없이 다단계 템플릿이 잘 돌아가는게 보이죠?\n\n지금까지 빌드 파이프라인을 리팩토링해 봤습니다. 이제 릴리즈 파이프라인으로 들어가 보겠습니다.\n\n\n## 릴리즈 파이프라인 ##\n\n릴리즈 파이프라인은 빌드 파이프라인과 크게 다르지 않습니다. 다만 `job` 대신 [`deployment job`][az devpos pipelines deploymentjobs]을 사용한다는 차이가 있을 뿐입니다. 이 둘의 차이에 대해 얘기하는 것은 이 포스트의 범위를 벗어나니 여기까지만 하기로 하고, 실제 릴리즈 파이프라인의 구성을 보겠습니다. 템플릿 리팩토링 없는 전형적인 릴리즈 스테이지는 아래와 같습니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-without-template.yaml&highlights=9\n\n위 코드를 보면 `Jobs` 수준에 `deployment`를 사용해서 작업 단위를 정의한 것을 볼 수 있죠 (line #9)? 이를 실행시킨 결과는 대략 아래와 같습니다.\n\n![리팩토링 전 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-06.png)\n\n이제 이 릴리즈 파이프라인을 동일하게 세 곳, `Steps`, `Jobs`, `Stages` 수준에서 리팩토링을 할 수 있습니다. 각각의 리팩토링 방식은 크게 다르지 않으므로 아래 리팩토링 결과만을 적어놓도록 하겠습니다.\n\n\n## 릴리즈 파이프라인을 `Steps` 수준에서 리팩토링하기 ##\n\n우선 `Steps` 수준에서 릴리즈 템플릿을 만들어 보도록 하죠. 부모 템플릿은 아래와 같습니다 (line #24-26).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-steps-template.yaml&highlights=24-26\n\n그리고 템플릿으로 빼낸 `Steps`는 아래와 같습니다. 앞서 빌드 파이프라인에서 사용한 템플릿과 구조가 다르지 않죠 (line #2-3)?\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-steps-release.yaml&highlights=2-3\n\n그리고 그 결과를 보면 아래와 같습니다.\n\n![Steps 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-07.png)\n\n\n## 릴리즈 파이프라인을 `Jobs` 수준에서 리팩토링하기 ##\n\n이번에는 릴리즈 파이프라인을 `Jobs` 수준에서 리팩토링해 보겠습니다 (line #13-17).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-jobs-template.yaml&highlights=13-17\n\n그리고 리팩토링한 템플릿은 아래와 같습니다. 여기서 눈여겨 봐야 할 부분은 바로 [`environment`][az devops pipelines environments] 이름도 파라미터로 처리가 가능하다는 점입니다 (line #14). 즉, 거의 대부분의 설정을 부모 파이프라인에서 파라미터로 내려주면 템플릿에서 받아 처리가 가능합니다 (line #2-5).\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-release.yaml&highlights=2-5,14\n\n![Jobs 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-08.png)\n\n\n## 릴리즈 파이프라인을 `Stages` 수준에서 리팩토링하기 ##\n\n더 이상의 자세한 설명은 생략합니다 (line #5-9). 😉\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-stages-template.yaml&highlights=5-9\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=tmplate-stages-release.yaml&highlights=2-5\n\n![Stages 수준 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-09.png)\n\n\n## 릴리즈 파이프라인을 다단계 템플릿으로 리팩토링하기 ##\n\n릴리즈 파이프라인 역시 다단계 템플릿으로 구성이 가능합니다.\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=pipeline-release-with-nested-stages-template.yaml&highlights=5-9\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-stages-nested-release.yaml&highlights=2-5,12-16\n\nhttps://gist.github.com/justinyoo/41e3c56debe1eaa0bb1d0ac062bb38b9?file=template-jobs-nested-release.yaml&highlights=20-22\n\n![다단계 리팩토링 후 애저 릴리즈 파이프라인 실행 결과](https://sa0blogs.blob.core.windows.net/aliencube/2019/08/azure-devops-pipelines-refactoring-technics-10.png)\n\n---\n\n이렇게 빌드 및 릴리즈 파이프라인을 모든 [`Stages`][az devops pipelines stages], [`Jobs`][az devops pipelines jobs], [`Steps`][az devops pipelines tasks] 수준에서 [템플릿][az devops pipelines templates]을 이용해 리팩토링을 해 보았습니다. 파이프라인 작업을 하다 보면 분명히 리팩토링이 필요한 순간이 생깁니다. 그리고 어느 수준에서 템플릿을 만들어 써야 할 지는 전적으로 상황마다 다르다고 할 수 있습니다.\n\n다만 한 가지 고려해야 할 것은, 템플릿은 가급적이면 단순한 작업을 할 수 있게끔 만드는 것이 좋습니다. 템플릿 표현식을 보면 조건문도 있고 반복문도 있고 굉장히 고급 기능을 사용할 수 있긴 하지만, 우선은 단순하게 시작해서 템플릿을 다듬어 나가는 것이 좋을 것입니다. 아무쪼록 [애저 데브옵스 파이프라인][az devops pipelines]의 [다중 스테이지 파이프라인 기법][az devops pipelines multi-stage]을 통해 다양한 템플릿 활용 테크닉을 도입해 보고 그 강력함을 느낄 수 있기를 바랍니다.\n\n\n## 더 궁금하다면... ##\n\n* 애저 클라우드에 관심이 있으신가요? ➡️ [무료 애저 계정 생성하기][az account free]\n* 애저 DevOps에 관심이 있으신가요? ➡️ [무료 애저 DevOps 사용하기][az devops free]\n* 애저 클라우드 무료 온라인 강의 코스를 들어 보세요! ➡️ [Microsoft Learn][ms learn]\n* 마이크로소프트 개발자 유튜브 채널 ➡️ [Microsoft Developer Korea][yt msdevkr]\n\n\n[az account free]: https://azure.microsoft.com/ko-kr/free/?WT.mc_id=devops-12575-juyoo\n[az devops free]: https://azure.microsoft.com/ko-kr/services/devops/?WT.mc_id=devops-12575-juyoo\n[ms learn]: https://docs.microsoft.com/ko-kr/learn/?WT.mc_id=devops-12575-juyoo\n[yt msdevkr]: https://www.youtube.com/channel/UCdgR-b2t7Byu_UGrHnu-T0g\n\n[az devops]: https://docs.microsoft.com/ko-kr/azure/devops/user-guide/what-is-azure-devops?view=azure-devops&WT.mc_id=devops-12575-juyoo\n[az devops pipelines]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops&WT.mc_id=devops-12575-juyoo\n[az devops pipelines tasks]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/tasks?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo\n[az devops pipelines jobs]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo\n[az devpos pipelines deploymentjobs]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/deployment-jobs?view=azure-devops&WT.mc_id=devops-12575-juyoo\n[az devops pipelines stages]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/stages?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo\n[az devops pipelines yaml]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema&WT.mc_id=devops-12575-juyoo\n[az devops pipelines templates]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/templates?view=azure-devops&WT.mc_id=devops-12575-juyoo\n[az devops pipelines conditions]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml&WT.mc_id=devops-12575-juyoo\n[az devops pipelines agents]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/agents/agents?view=azure-devops&tabs=browser&WT.mc_id=devops-12575-juyoo\n[az devops pipelines multi-stage]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/get-started/multi-stage-pipelines-experience?view=azure-devops&WT.mc_id=devops-12575-juyoo\n[az devops pipelines environments]: https://docs.microsoft.com/ko-kr/azure/devops/pipelines/process/environments?view=azure-devops&WT.mc_id=devops-12575-juyoo\n"}}]